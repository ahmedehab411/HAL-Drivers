
SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003282  00003316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800168  00800168  0000341e  2**0
                  ALLOC
  3 .stab         00002b98  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001be1  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00007d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00007f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000a5f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000bad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000cd7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000d25a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__vector_6>
      1c:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__vector_7>
      20:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__vector_8>
      24:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e8       	ldi	r30, 0x82	; 130
      78:	f2 e3       	ldi	r31, 0x32	; 50
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <main>
      8a:	0c 94 3f 19 	jmp	0x327e	; 0x327e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <TIMER1_u8Init>:
static void (*CTCAADDR)(void)=NULL;
static void (*CTCBADDR)(void)=NULL;
static void (*ICRADDR)(void)=NULL;

u8 TIMER1_u8Init(TIMER1_MODE_e TimerMode)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <TIMER1_u8Init+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <TIMER1_u8Init+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus=RT_OK;
     e9c:	19 82       	std	Y+1, r1	; 0x01
	switch (TimerMode)
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3c 83       	std	Y+4, r19	; 0x04
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	87 30       	cpi	r24, 0x07	; 7
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <TIMER1_u8Init+0x26>
     eb2:	24 c1       	rjmp	.+584    	; 0x10fc <TIMER1_u8Init+0x26e>
     eb4:	2b 81       	ldd	r18, Y+3	; 0x03
     eb6:	3c 81       	ldd	r19, Y+4	; 0x04
     eb8:	28 30       	cpi	r18, 0x08	; 8
     eba:	31 05       	cpc	r19, r1
     ebc:	4c f5       	brge	.+82     	; 0xf10 <TIMER1_u8Init+0x82>
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	9c 81       	ldd	r25, Y+4	; 0x04
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <TIMER1_u8Init+0x3c>
     ec8:	a5 c0       	rjmp	.+330    	; 0x1014 <TIMER1_u8Init+0x186>
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	24 30       	cpi	r18, 0x04	; 4
     ed0:	31 05       	cpc	r19, r1
     ed2:	8c f4       	brge	.+34     	; 0xef6 <TIMER1_u8Init+0x68>
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <TIMER1_u8Init+0x52>
     ede:	60 c0       	rjmp	.+192    	; 0xfa0 <TIMER1_u8Init+0x112>
     ee0:	2b 81       	ldd	r18, Y+3	; 0x03
     ee2:	3c 81       	ldd	r19, Y+4	; 0x04
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	0c f0       	brlt	.+2      	; 0xeec <TIMER1_u8Init+0x5e>
     eea:	77 c0       	rjmp	.+238    	; 0xfda <TIMER1_u8Init+0x14c>
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	c9 f1       	breq	.+114    	; 0xf66 <TIMER1_u8Init+0xd8>
     ef4:	ea c1       	rjmp	.+980    	; 0x12ca <TIMER1_u8Init+0x43c>
     ef6:	2b 81       	ldd	r18, Y+3	; 0x03
     ef8:	3c 81       	ldd	r19, Y+4	; 0x04
     efa:	25 30       	cpi	r18, 0x05	; 5
     efc:	31 05       	cpc	r19, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <TIMER1_u8Init+0x74>
     f00:	c3 c0       	rjmp	.+390    	; 0x1088 <TIMER1_u8Init+0x1fa>
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	86 30       	cpi	r24, 0x06	; 6
     f08:	91 05       	cpc	r25, r1
     f0a:	0c f0       	brlt	.+2      	; 0xf0e <TIMER1_u8Init+0x80>
     f0c:	da c0       	rjmp	.+436    	; 0x10c2 <TIMER1_u8Init+0x234>
     f0e:	9f c0       	rjmp	.+318    	; 0x104e <TIMER1_u8Init+0x1c0>
     f10:	2b 81       	ldd	r18, Y+3	; 0x03
     f12:	3c 81       	ldd	r19, Y+4	; 0x04
     f14:	2b 30       	cpi	r18, 0x0B	; 11
     f16:	31 05       	cpc	r19, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <TIMER1_u8Init+0x8e>
     f1a:	64 c1       	rjmp	.+712    	; 0x11e4 <TIMER1_u8Init+0x356>
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	8c 30       	cpi	r24, 0x0C	; 12
     f22:	91 05       	cpc	r25, r1
     f24:	6c f4       	brge	.+26     	; 0xf40 <TIMER1_u8Init+0xb2>
     f26:	2b 81       	ldd	r18, Y+3	; 0x03
     f28:	3c 81       	ldd	r19, Y+4	; 0x04
     f2a:	29 30       	cpi	r18, 0x09	; 9
     f2c:	31 05       	cpc	r19, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <TIMER1_u8Init+0xa4>
     f30:	1f c1       	rjmp	.+574    	; 0x1170 <TIMER1_u8Init+0x2e2>
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	8a 30       	cpi	r24, 0x0A	; 10
     f38:	91 05       	cpc	r25, r1
     f3a:	0c f0       	brlt	.+2      	; 0xf3e <TIMER1_u8Init+0xb0>
     f3c:	36 c1       	rjmp	.+620    	; 0x11aa <TIMER1_u8Init+0x31c>
     f3e:	fb c0       	rjmp	.+502    	; 0x1136 <TIMER1_u8Init+0x2a8>
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	3c 81       	ldd	r19, Y+4	; 0x04
     f44:	2e 30       	cpi	r18, 0x0E	; 14
     f46:	31 05       	cpc	r19, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <TIMER1_u8Init+0xbe>
     f4a:	86 c1       	rjmp	.+780    	; 0x1258 <TIMER1_u8Init+0x3ca>
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	8f 30       	cpi	r24, 0x0F	; 15
     f52:	91 05       	cpc	r25, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <TIMER1_u8Init+0xca>
     f56:	9d c1       	rjmp	.+826    	; 0x1292 <TIMER1_u8Init+0x404>
     f58:	2b 81       	ldd	r18, Y+3	; 0x03
     f5a:	3c 81       	ldd	r19, Y+4	; 0x04
     f5c:	2c 30       	cpi	r18, 0x0C	; 12
     f5e:	31 05       	cpc	r19, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <TIMER1_u8Init+0xd6>
     f62:	5d c1       	rjmp	.+698    	; 0x121e <TIMER1_u8Init+0x390>
     f64:	b2 c1       	rjmp	.+868    	; 0x12ca <TIMER1_u8Init+0x43c>
	{
	case TIMER1_MODE_e_NORMAL:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
     f66:	af e4       	ldi	r26, 0x4F	; 79
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ef e4       	ldi	r30, 0x4F	; 79
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
     f74:	af e4       	ldi	r26, 0x4F	; 79
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ef e4       	ldi	r30, 0x4F	; 79
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8d 7f       	andi	r24, 0xFD	; 253
     f80:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
     f82:	ae e4       	ldi	r26, 0x4E	; 78
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ee e4       	ldi	r30, 0x4E	; 78
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	87 7f       	andi	r24, 0xF7	; 247
     f8e:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
     f90:	ae e4       	ldi	r26, 0x4E	; 78
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ee e4       	ldi	r30, 0x4E	; 78
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7e       	andi	r24, 0xEF	; 239
     f9c:	8c 93       	st	X, r24
     f9e:	95 c1       	rjmp	.+810    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_8bit:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
     fa0:	af e4       	ldi	r26, 0x4F	; 79
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ef e4       	ldi	r30, 0x4F	; 79
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
     fae:	af e4       	ldi	r26, 0x4F	; 79
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ef e4       	ldi	r30, 0x4F	; 79
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8d 7f       	andi	r24, 0xFD	; 253
     fba:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
     fbc:	ae e4       	ldi	r26, 0x4E	; 78
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ee e4       	ldi	r30, 0x4E	; 78
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	87 7f       	andi	r24, 0xF7	; 247
     fc8:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
     fca:	ae e4       	ldi	r26, 0x4E	; 78
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ee e4       	ldi	r30, 0x4E	; 78
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	8c 93       	st	X, r24
     fd8:	78 c1       	rjmp	.+752    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_9bit:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
     fda:	af e4       	ldi	r26, 0x4F	; 79
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ef e4       	ldi	r30, 0x4F	; 79
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8e 7f       	andi	r24, 0xFE	; 254
     fe6:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
     fe8:	af e4       	ldi	r26, 0x4F	; 79
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ef e4       	ldi	r30, 0x4F	; 79
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	82 60       	ori	r24, 0x02	; 2
     ff4:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
     ff6:	ae e4       	ldi	r26, 0x4E	; 78
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ee e4       	ldi	r30, 0x4E	; 78
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	87 7f       	andi	r24, 0xF7	; 247
    1002:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    1004:	ae e4       	ldi	r26, 0x4E	; 78
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ee e4       	ldi	r30, 0x4E	; 78
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7e       	andi	r24, 0xEF	; 239
    1010:	8c 93       	st	X, r24
    1012:	5b c1       	rjmp	.+694    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_10bit:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    1014:	af e4       	ldi	r26, 0x4F	; 79
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ef e4       	ldi	r30, 0x4F	; 79
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	81 60       	ori	r24, 0x01	; 1
    1020:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    1022:	af e4       	ldi	r26, 0x4F	; 79
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ef e4       	ldi	r30, 0x4F	; 79
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	87 7f       	andi	r24, 0xF7	; 247
    103c:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    103e:	ae e4       	ldi	r26, 0x4E	; 78
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ee e4       	ldi	r30, 0x4E	; 78
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8f 7e       	andi	r24, 0xEF	; 239
    104a:	8c 93       	st	X, r24
    104c:	3e c1       	rjmp	.+636    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_CTC_OCR1A:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    104e:	af e4       	ldi	r26, 0x4F	; 79
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ef e4       	ldi	r30, 0x4F	; 79
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    105c:	af e4       	ldi	r26, 0x4F	; 79
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ef e4       	ldi	r30, 0x4F	; 79
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8d 7f       	andi	r24, 0xFD	; 253
    1068:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    106a:	ae e4       	ldi	r26, 0x4E	; 78
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ee e4       	ldi	r30, 0x4E	; 78
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 60       	ori	r24, 0x08	; 8
    1076:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    1078:	ae e4       	ldi	r26, 0x4E	; 78
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	ee e4       	ldi	r30, 0x4E	; 78
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8f 7e       	andi	r24, 0xEF	; 239
    1084:	8c 93       	st	X, r24
    1086:	21 c1       	rjmp	.+578    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_FAST_PWM_8bit:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    1088:	af e4       	ldi	r26, 0x4F	; 79
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ef e4       	ldi	r30, 0x4F	; 79
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    1096:	af e4       	ldi	r26, 0x4F	; 79
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ef e4       	ldi	r30, 0x4F	; 79
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8d 7f       	andi	r24, 0xFD	; 253
    10a2:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    10a4:	ae e4       	ldi	r26, 0x4E	; 78
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ee e4       	ldi	r30, 0x4E	; 78
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    10b2:	ae e4       	ldi	r26, 0x4E	; 78
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ee e4       	ldi	r30, 0x4E	; 78
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8f 7e       	andi	r24, 0xEF	; 239
    10be:	8c 93       	st	X, r24
    10c0:	04 c1       	rjmp	.+520    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_FAST_PWM_9bit:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    10c2:	af e4       	ldi	r26, 0x4F	; 79
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ef e4       	ldi	r30, 0x4F	; 79
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8e 7f       	andi	r24, 0xFE	; 254
    10ce:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    10d0:	af e4       	ldi	r26, 0x4F	; 79
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ef e4       	ldi	r30, 0x4F	; 79
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    10de:	ae e4       	ldi	r26, 0x4E	; 78
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ee e4       	ldi	r30, 0x4E	; 78
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 60       	ori	r24, 0x08	; 8
    10ea:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    10ec:	ae e4       	ldi	r26, 0x4E	; 78
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 7e       	andi	r24, 0xEF	; 239
    10f8:	8c 93       	st	X, r24
    10fa:	e7 c0       	rjmp	.+462    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_FAST_PWM_10bit:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    10fc:	af e4       	ldi	r26, 0x4F	; 79
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ef e4       	ldi	r30, 0x4F	; 79
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    110a:	af e4       	ldi	r26, 0x4F	; 79
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ef e4       	ldi	r30, 0x4F	; 79
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    1118:	ae e4       	ldi	r26, 0x4E	; 78
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	ee e4       	ldi	r30, 0x4E	; 78
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	88 60       	ori	r24, 0x08	; 8
    1124:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    1126:	ae e4       	ldi	r26, 0x4E	; 78
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ee e4       	ldi	r30, 0x4E	; 78
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8f 7e       	andi	r24, 0xEF	; 239
    1132:	8c 93       	st	X, r24
    1134:	ca c0       	rjmp	.+404    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_FREQUENCY_ICR1:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    1136:	af e4       	ldi	r26, 0x4F	; 79
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ef e4       	ldi	r30, 0x4F	; 79
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8e 7f       	andi	r24, 0xFE	; 254
    1142:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    1144:	af e4       	ldi	r26, 0x4F	; 79
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ef e4       	ldi	r30, 0x4F	; 79
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8d 7f       	andi	r24, 0xFD	; 253
    1150:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    1160:	ae e4       	ldi	r26, 0x4E	; 78
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ee e4       	ldi	r30, 0x4E	; 78
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 61       	ori	r24, 0x10	; 16
    116c:	8c 93       	st	X, r24
    116e:	ad c0       	rjmp	.+346    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_FREQUENCY_OCR1A:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    1170:	af e4       	ldi	r26, 0x4F	; 79
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ef e4       	ldi	r30, 0x4F	; 79
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    117e:	af e4       	ldi	r26, 0x4F	; 79
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ef e4       	ldi	r30, 0x4F	; 79
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8d 7f       	andi	r24, 0xFD	; 253
    118a:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    118c:	ae e4       	ldi	r26, 0x4E	; 78
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ee e4       	ldi	r30, 0x4E	; 78
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	87 7f       	andi	r24, 0xF7	; 247
    1198:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    119a:	ae e4       	ldi	r26, 0x4E	; 78
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	ee e4       	ldi	r30, 0x4E	; 78
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 61       	ori	r24, 0x10	; 16
    11a6:	8c 93       	st	X, r24
    11a8:	90 c0       	rjmp	.+288    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_ICR1:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    11aa:	af e4       	ldi	r26, 0x4F	; 79
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ef e4       	ldi	r30, 0x4F	; 79
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8e 7f       	andi	r24, 0xFE	; 254
    11b6:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    11b8:	af e4       	ldi	r26, 0x4F	; 79
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ef e4       	ldi	r30, 0x4F	; 79
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	82 60       	ori	r24, 0x02	; 2
    11c4:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    11c6:	ae e4       	ldi	r26, 0x4E	; 78
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ee e4       	ldi	r30, 0x4E	; 78
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    11d4:	ae e4       	ldi	r26, 0x4E	; 78
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ee e4       	ldi	r30, 0x4E	; 78
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	80 61       	ori	r24, 0x10	; 16
    11e0:	8c 93       	st	X, r24
    11e2:	73 c0       	rjmp	.+230    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_PWM_OCR1A:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    11e4:	af e4       	ldi	r26, 0x4F	; 79
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ef e4       	ldi	r30, 0x4F	; 79
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    11f2:	af e4       	ldi	r26, 0x4F	; 79
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    1200:	ae e4       	ldi	r26, 0x4E	; 78
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ee e4       	ldi	r30, 0x4E	; 78
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    120e:	ae e4       	ldi	r26, 0x4E	; 78
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ee e4       	ldi	r30, 0x4E	; 78
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 61       	ori	r24, 0x10	; 16
    121a:	8c 93       	st	X, r24
    121c:	56 c0       	rjmp	.+172    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_CTC_ICR1:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    121e:	af e4       	ldi	r26, 0x4F	; 79
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e4       	ldi	r30, 0x4F	; 79
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	8c 93       	st	X, r24
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    122c:	af e4       	ldi	r26, 0x4F	; 79
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ef e4       	ldi	r30, 0x4F	; 79
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8d 7f       	andi	r24, 0xFD	; 253
    1238:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    123a:	ae e4       	ldi	r26, 0x4E	; 78
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ee e4       	ldi	r30, 0x4E	; 78
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 60       	ori	r24, 0x08	; 8
    1246:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    1248:	ae e4       	ldi	r26, 0x4E	; 78
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ee e4       	ldi	r30, 0x4E	; 78
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 61       	ori	r24, 0x10	; 16
    1254:	8c 93       	st	X, r24
    1256:	39 c0       	rjmp	.+114    	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_FAST_PWM_ICR1:
		Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    1258:	af e4       	ldi	r26, 0x4F	; 79
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ef e4       	ldi	r30, 0x4F	; 79
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8e 7f       	andi	r24, 0xFE	; 254
    1264:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    1266:	af e4       	ldi	r26, 0x4F	; 79
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ef e4       	ldi	r30, 0x4F	; 79
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	88 60       	ori	r24, 0x08	; 8
    1280:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    1282:	ae e4       	ldi	r26, 0x4E	; 78
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ee e4       	ldi	r30, 0x4E	; 78
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	80 61       	ori	r24, 0x10	; 16
    128e:	8c 93       	st	X, r24
    1290:	1c c0       	rjmp	.+56     	; 0x12ca <TIMER1_u8Init+0x43c>
		break;
	case TIMER1_MODE_e_FAST_PWM_OCR1A:
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM10);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	8c 93       	st	X, r24
		Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_WGM11);
    12a0:	af e4       	ldi	r26, 0x4F	; 79
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ef e4       	ldi	r30, 0x4F	; 79
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	82 60       	ori	r24, 0x02	; 2
    12ac:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM12);
    12ae:	ae e4       	ldi	r26, 0x4E	; 78
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ee e4       	ldi	r30, 0x4E	; 78
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	88 60       	ori	r24, 0x08	; 8
    12ba:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_WGM13);
    12bc:	ae e4       	ldi	r26, 0x4E	; 78
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ee e4       	ldi	r30, 0x4E	; 78
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	8c 93       	st	X, r24
		break;
	default:
		Local_u8ErrStatus-RT_NOK;
		break;
	}
	return Local_u8ErrStatus;
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <TIMER1_u8ClkSelect>:
u8 TIMER1_u8ClkSelect(TIMER1_CLK_SELECT_e ClkSelect)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <TIMER1_u8ClkSelect+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <TIMER1_u8ClkSelect+0x8>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrStatus=RT_OK;
    12e8:	19 82       	std	Y+1, r1	; 0x01
	switch (ClkSelect)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3c 83       	std	Y+4, r19	; 0x04
    12f2:	2b 83       	std	Y+3, r18	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <TIMER1_u8ClkSelect+0x26>
    12fe:	70 c0       	rjmp	.+224    	; 0x13e0 <TIMER1_u8ClkSelect+0x106>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	24 30       	cpi	r18, 0x04	; 4
    1306:	31 05       	cpc	r19, r1
    1308:	84 f4       	brge	.+32     	; 0x132a <TIMER1_u8ClkSelect+0x50>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f1       	breq	.+116    	; 0x1388 <TIMER1_u8ClkSelect+0xae>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	0c f0       	brlt	.+2      	; 0x1320 <TIMER1_u8ClkSelect+0x46>
    131e:	4a c0       	rjmp	.+148    	; 0x13b4 <TIMER1_u8ClkSelect+0xda>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	d1 f0       	breq	.+52     	; 0x135c <TIMER1_u8ClkSelect+0x82>
    1328:	c9 c0       	rjmp	.+402    	; 0x14bc <TIMER1_u8ClkSelect+0x1e2>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	25 30       	cpi	r18, 0x05	; 5
    1330:	31 05       	cpc	r19, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <TIMER1_u8ClkSelect+0x5c>
    1334:	81 c0       	rjmp	.+258    	; 0x1438 <TIMER1_u8ClkSelect+0x15e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	85 30       	cpi	r24, 0x05	; 5
    133c:	91 05       	cpc	r25, r1
    133e:	0c f4       	brge	.+2      	; 0x1342 <TIMER1_u8ClkSelect+0x68>
    1340:	65 c0       	rjmp	.+202    	; 0x140c <TIMER1_u8ClkSelect+0x132>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	26 30       	cpi	r18, 0x06	; 6
    1348:	31 05       	cpc	r19, r1
    134a:	09 f4       	brne	.+2      	; 0x134e <TIMER1_u8ClkSelect+0x74>
    134c:	8b c0       	rjmp	.+278    	; 0x1464 <TIMER1_u8ClkSelect+0x18a>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	87 30       	cpi	r24, 0x07	; 7
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <TIMER1_u8ClkSelect+0x80>
    1358:	9b c0       	rjmp	.+310    	; 0x1490 <TIMER1_u8ClkSelect+0x1b6>
    135a:	b0 c0       	rjmp	.+352    	; 0x14bc <TIMER1_u8ClkSelect+0x1e2>
	{
	case TIMER1_CLK_SELECT_e_NO_CLK:
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    135c:	ae e4       	ldi	r26, 0x4E	; 78
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ee e4       	ldi	r30, 0x4E	; 78
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8e 7f       	andi	r24, 0xFE	; 254
    1368:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    136a:	ae e4       	ldi	r26, 0x4E	; 78
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ee e4       	ldi	r30, 0x4E	; 78
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8d 7f       	andi	r24, 0xFD	; 253
    1376:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    1378:	ae e4       	ldi	r26, 0x4E	; 78
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ee e4       	ldi	r30, 0x4E	; 78
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8b 7f       	andi	r24, 0xFB	; 251
    1384:	8c 93       	st	X, r24
    1386:	9c c0       	rjmp	.+312    	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_NO_PRE:
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    1388:	ae e4       	ldi	r26, 0x4E	; 78
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ee e4       	ldi	r30, 0x4E	; 78
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    1396:	ae e4       	ldi	r26, 0x4E	; 78
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e4       	ldi	r30, 0x4E	; 78
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8d 7f       	andi	r24, 0xFD	; 253
    13a2:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8b 7f       	andi	r24, 0xFB	; 251
    13b0:	8c 93       	st	X, r24
    13b2:	86 c0       	rjmp	.+268    	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_PRE_8:
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    13b4:	ae e4       	ldi	r26, 0x4E	; 78
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ee e4       	ldi	r30, 0x4E	; 78
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	82 60       	ori	r24, 0x02	; 2
    13ce:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8b 7f       	andi	r24, 0xFB	; 251
    13dc:	8c 93       	st	X, r24
    13de:	70 c0       	rjmp	.+224    	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_PRE_64:
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    13e0:	ae e4       	ldi	r26, 0x4E	; 78
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ee e4       	ldi	r30, 0x4E	; 78
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    13ee:	ae e4       	ldi	r26, 0x4E	; 78
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ee e4       	ldi	r30, 0x4E	; 78
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8b 7f       	andi	r24, 0xFB	; 251
    1408:	8c 93       	st	X, r24
    140a:	5a c0       	rjmp	.+180    	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_PRE_256:
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    140c:	ae e4       	ldi	r26, 0x4E	; 78
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ee e4       	ldi	r30, 0x4E	; 78
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    141a:	ae e4       	ldi	r26, 0x4E	; 78
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ee e4       	ldi	r30, 0x4E	; 78
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8d 7f       	andi	r24, 0xFD	; 253
    1426:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    1428:	ae e4       	ldi	r26, 0x4E	; 78
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ee e4       	ldi	r30, 0x4E	; 78
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	84 60       	ori	r24, 0x04	; 4
    1434:	8c 93       	st	X, r24
    1436:	44 c0       	rjmp	.+136    	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_PRE_1024:
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    1438:	ae e4       	ldi	r26, 0x4E	; 78
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ee e4       	ldi	r30, 0x4E	; 78
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	81 60       	ori	r24, 0x01	; 1
    1444:	8c 93       	st	X, r24
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    1446:	ae e4       	ldi	r26, 0x4E	; 78
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ee e4       	ldi	r30, 0x4E	; 78
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8d 7f       	andi	r24, 0xFD	; 253
    1452:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    1454:	ae e4       	ldi	r26, 0x4E	; 78
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ee e4       	ldi	r30, 0x4E	; 78
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	8c 93       	st	X, r24
    1462:	2e c0       	rjmp	.+92     	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_EXT_FALLING:
		Clr_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    1464:	ae e4       	ldi	r26, 0x4E	; 78
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    1472:	ae e4       	ldi	r26, 0x4E	; 78
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	82 60       	ori	r24, 0x02	; 2
    147e:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    1480:	ae e4       	ldi	r26, 0x4E	; 78
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ee e4       	ldi	r30, 0x4E	; 78
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	8c 93       	st	X, r24
    148e:	18 c0       	rjmp	.+48     	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	case TIMER1_CLK_SELECT_e_EXT_RISING:
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS10);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS11);
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	82 60       	ori	r24, 0x02	; 2
    14aa:	8c 93       	st	X, r24
		Set_Bit(TCCR1B_REG,TIMER1_TCCR1B_e_CS12);
    14ac:	ae e4       	ldi	r26, 0x4E	; 78
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ee e4       	ldi	r30, 0x4E	; 78
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	84 60       	ori	r24, 0x04	; 4
    14b8:	8c 93       	st	X, r24
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <TIMER1_u8ClkSelect+0x1e6>
		break;
	default:
		Local_u8ErrStatus=RT_NOK;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrStatus;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <TIMER1_vidSetPwmMode>:
u8 TIMER1_vidSetPwmMode(TIMER1_PHASE_CORRECT_PWM_COMPARE_e PwmMode, TIMER1_CHANNEL_e Channel)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	27 97       	sbiw	r28, 0x07	; 7
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=RT_OK;
    14e8:	19 82       	std	Y+1, r1	; 0x01
	if(Channel==TIMER1_CHANNEL_e_CHANNEL_A)
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <TIMER1_vidSetPwmMode+0x22>
    14f0:	5e c0       	rjmp	.+188    	; 0x15ae <TIMER1_vidSetPwmMode+0xde>
	{
		switch (PwmMode) {
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3f 83       	std	Y+7, r19	; 0x07
    14fa:	2e 83       	std	Y+6, r18	; 0x06
    14fc:	8e 81       	ldd	r24, Y+6	; 0x06
    14fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	21 f1       	breq	.+72     	; 0x154e <TIMER1_vidSetPwmMode+0x7e>
    1506:	2e 81       	ldd	r18, Y+6	; 0x06
    1508:	3f 81       	ldd	r19, Y+7	; 0x07
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <TIMER1_vidSetPwmMode+0x4a>
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	9f 81       	ldd	r25, Y+7	; 0x07
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <TIMER1_vidSetPwmMode+0x60>
    1518:	47 c0       	rjmp	.+142    	; 0x15a8 <TIMER1_vidSetPwmMode+0xd8>
    151a:	2e 81       	ldd	r18, Y+6	; 0x06
    151c:	3f 81       	ldd	r19, Y+7	; 0x07
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	21 f1       	breq	.+72     	; 0x156c <TIMER1_vidSetPwmMode+0x9c>
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	9f 81       	ldd	r25, Y+7	; 0x07
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	71 f1       	breq	.+92     	; 0x158a <TIMER1_vidSetPwmMode+0xba>
    152e:	3c c0       	rjmp	.+120    	; 0x15a8 <TIMER1_vidSetPwmMode+0xd8>
		case 0:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1530:	af e4       	ldi	r26, 0x4F	; 79
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ef e4       	ldi	r30, 0x4F	; 79
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8f 7b       	andi	r24, 0xBF	; 191
    153c:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    153e:	af e4       	ldi	r26, 0x4F	; 79
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ef e4       	ldi	r30, 0x4F	; 79
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8f 77       	andi	r24, 0x7F	; 127
    154a:	8c 93       	st	X, r24
    154c:	94 c0       	rjmp	.+296    	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		case 1:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    154e:	af e4       	ldi	r26, 0x4F	; 79
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ef e4       	ldi	r30, 0x4F	; 79
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 64       	ori	r24, 0x40	; 64
    155a:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    155c:	af e4       	ldi	r26, 0x4F	; 79
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ef e4       	ldi	r30, 0x4F	; 79
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8f 77       	andi	r24, 0x7F	; 127
    1568:	8c 93       	st	X, r24
    156a:	85 c0       	rjmp	.+266    	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		case 2:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    156c:	af e4       	ldi	r26, 0x4F	; 79
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ef e4       	ldi	r30, 0x4F	; 79
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 7b       	andi	r24, 0xBF	; 191
    1578:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    157a:	af e4       	ldi	r26, 0x4F	; 79
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ef e4       	ldi	r30, 0x4F	; 79
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	8c 93       	st	X, r24
    1588:	76 c0       	rjmp	.+236    	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		case 3:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    158a:	af e4       	ldi	r26, 0x4F	; 79
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ef e4       	ldi	r30, 0x4F	; 79
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 64       	ori	r24, 0x40	; 64
    1596:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1598:	af e4       	ldi	r26, 0x4F	; 79
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ef e4       	ldi	r30, 0x4F	; 79
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8c 93       	st	X, r24
    15a6:	67 c0       	rjmp	.+206    	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	64 c0       	rjmp	.+200    	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		}
	}
	else if(Channel==TIMER1_CHANNEL_e_CHANNEL_B)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <TIMER1_vidSetPwmMode+0xe6>
    15b4:	5e c0       	rjmp	.+188    	; 0x1672 <TIMER1_vidSetPwmMode+0x1a2>
	{
		switch (PwmMode) {
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	21 f1       	breq	.+72     	; 0x1612 <TIMER1_vidSetPwmMode+0x142>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <TIMER1_vidSetPwmMode+0x10e>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <TIMER1_vidSetPwmMode+0x124>
    15dc:	47 c0       	rjmp	.+142    	; 0x166c <TIMER1_vidSetPwmMode+0x19c>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	21 f1       	breq	.+72     	; 0x1630 <TIMER1_vidSetPwmMode+0x160>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	71 f1       	breq	.+92     	; 0x164e <TIMER1_vidSetPwmMode+0x17e>
    15f2:	3c c0       	rjmp	.+120    	; 0x166c <TIMER1_vidSetPwmMode+0x19c>
		case 0:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    15f4:	af e4       	ldi	r26, 0x4F	; 79
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ef e4       	ldi	r30, 0x4F	; 79
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8f 7e       	andi	r24, 0xEF	; 239
    1600:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1602:	af e4       	ldi	r26, 0x4F	; 79
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ef e4       	ldi	r30, 0x4F	; 79
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8f 7d       	andi	r24, 0xDF	; 223
    160e:	8c 93       	st	X, r24
    1610:	32 c0       	rjmp	.+100    	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		case 1:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1612:	af e4       	ldi	r26, 0x4F	; 79
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ef e4       	ldi	r30, 0x4F	; 79
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 61       	ori	r24, 0x10	; 16
    161e:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1620:	af e4       	ldi	r26, 0x4F	; 79
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ef e4       	ldi	r30, 0x4F	; 79
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8f 7d       	andi	r24, 0xDF	; 223
    162c:	8c 93       	st	X, r24
    162e:	23 c0       	rjmp	.+70     	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		case 2:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1630:	af e4       	ldi	r26, 0x4F	; 79
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ef e4       	ldi	r30, 0x4F	; 79
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8f 7e       	andi	r24, 0xEF	; 239
    163c:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    163e:	af e4       	ldi	r26, 0x4F	; 79
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ef e4       	ldi	r30, 0x4F	; 79
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 62       	ori	r24, 0x20	; 32
    164a:	8c 93       	st	X, r24
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		case 3:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    164e:	af e4       	ldi	r26, 0x4F	; 79
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 61       	ori	r24, 0x10	; 16
    165a:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    165c:	af e4       	ldi	r26, 0x4F	; 79
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ef e4       	ldi	r30, 0x4F	; 79
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 62       	ori	r24, 0x20	; 32
    1668:	8c 93       	st	X, r24
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <TIMER1_vidSetPwmMode+0x1a6>
			break;
		}
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}
    1678:	27 96       	adiw	r28, 0x07	; 7
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <TIMER1_vidSetFastPwmMode>:

u8 TIMER1_vidSetFastPwmMode(TIMER1_FAST_PWM_COMPARE_e PwmMode, TIMER1_CHANNEL_e Channel)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	27 97       	sbiw	r28, 0x07	; 7
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	8a 83       	std	Y+2, r24	; 0x02
    16a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=RT_OK;
    16a2:	19 82       	std	Y+1, r1	; 0x01
	if(Channel==TIMER1_CHANNEL_e_CHANNEL_A)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	88 23       	and	r24, r24
    16a8:	09 f0       	breq	.+2      	; 0x16ac <TIMER1_vidSetFastPwmMode+0x22>
    16aa:	5e c0       	rjmp	.+188    	; 0x1768 <TIMER1_vidSetFastPwmMode+0xde>
	{
		switch (PwmMode) {
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3f 83       	std	Y+7, r19	; 0x07
    16b4:	2e 83       	std	Y+6, r18	; 0x06
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	21 f1       	breq	.+72     	; 0x1708 <TIMER1_vidSetFastPwmMode+0x7e>
    16c0:	2e 81       	ldd	r18, Y+6	; 0x06
    16c2:	3f 81       	ldd	r19, Y+7	; 0x07
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <TIMER1_vidSetFastPwmMode+0x4a>
    16ca:	8e 81       	ldd	r24, Y+6	; 0x06
    16cc:	9f 81       	ldd	r25, Y+7	; 0x07
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <TIMER1_vidSetFastPwmMode+0x60>
    16d2:	47 c0       	rjmp	.+142    	; 0x1762 <TIMER1_vidSetFastPwmMode+0xd8>
    16d4:	2e 81       	ldd	r18, Y+6	; 0x06
    16d6:	3f 81       	ldd	r19, Y+7	; 0x07
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	21 f1       	breq	.+72     	; 0x1726 <TIMER1_vidSetFastPwmMode+0x9c>
    16de:	8e 81       	ldd	r24, Y+6	; 0x06
    16e0:	9f 81       	ldd	r25, Y+7	; 0x07
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	71 f1       	breq	.+92     	; 0x1744 <TIMER1_vidSetFastPwmMode+0xba>
    16e8:	3c c0       	rjmp	.+120    	; 0x1762 <TIMER1_vidSetFastPwmMode+0xd8>
		case 0:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    16ea:	af e4       	ldi	r26, 0x4F	; 79
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ef e4       	ldi	r30, 0x4F	; 79
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8f 7b       	andi	r24, 0xBF	; 191
    16f6:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    16f8:	af e4       	ldi	r26, 0x4F	; 79
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	ef e4       	ldi	r30, 0x4F	; 79
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	8f 77       	andi	r24, 0x7F	; 127
    1704:	8c 93       	st	X, r24
    1706:	94 c0       	rjmp	.+296    	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		case 1:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1708:	af e4       	ldi	r26, 0x4F	; 79
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ef e4       	ldi	r30, 0x4F	; 79
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 64       	ori	r24, 0x40	; 64
    1714:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1716:	af e4       	ldi	r26, 0x4F	; 79
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ef e4       	ldi	r30, 0x4F	; 79
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 77       	andi	r24, 0x7F	; 127
    1722:	8c 93       	st	X, r24
    1724:	85 c0       	rjmp	.+266    	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		case 2:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1726:	af e4       	ldi	r26, 0x4F	; 79
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ef e4       	ldi	r30, 0x4F	; 79
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8f 7b       	andi	r24, 0xBF	; 191
    1732:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1734:	af e4       	ldi	r26, 0x4F	; 79
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ef e4       	ldi	r30, 0x4F	; 79
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 68       	ori	r24, 0x80	; 128
    1740:	8c 93       	st	X, r24
    1742:	76 c0       	rjmp	.+236    	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		case 3:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1744:	af e4       	ldi	r26, 0x4F	; 79
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 64       	ori	r24, 0x40	; 64
    1750:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1752:	af e4       	ldi	r26, 0x4F	; 79
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ef e4       	ldi	r30, 0x4F	; 79
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 68       	ori	r24, 0x80	; 128
    175e:	8c 93       	st	X, r24
    1760:	67 c0       	rjmp	.+206    	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	64 c0       	rjmp	.+200    	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		}
	}
	else if(Channel==TIMER1_CHANNEL_e_CHANNEL_B)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	09 f0       	breq	.+2      	; 0x1770 <TIMER1_vidSetFastPwmMode+0xe6>
    176e:	5e c0       	rjmp	.+188    	; 0x182c <TIMER1_vidSetFastPwmMode+0x1a2>
	{
		switch (PwmMode) {
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3d 83       	std	Y+5, r19	; 0x05
    1778:	2c 83       	std	Y+4, r18	; 0x04
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	91 05       	cpc	r25, r1
    1782:	21 f1       	breq	.+72     	; 0x17cc <TIMER1_vidSetFastPwmMode+0x142>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	2c f4       	brge	.+10     	; 0x1798 <TIMER1_vidSetFastPwmMode+0x10e>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	61 f0       	breq	.+24     	; 0x17ae <TIMER1_vidSetFastPwmMode+0x124>
    1796:	47 c0       	rjmp	.+142    	; 0x1826 <TIMER1_vidSetFastPwmMode+0x19c>
    1798:	2c 81       	ldd	r18, Y+4	; 0x04
    179a:	3d 81       	ldd	r19, Y+5	; 0x05
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	21 f1       	breq	.+72     	; 0x17ea <TIMER1_vidSetFastPwmMode+0x160>
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	83 30       	cpi	r24, 0x03	; 3
    17a8:	91 05       	cpc	r25, r1
    17aa:	71 f1       	breq	.+92     	; 0x1808 <TIMER1_vidSetFastPwmMode+0x17e>
    17ac:	3c c0       	rjmp	.+120    	; 0x1826 <TIMER1_vidSetFastPwmMode+0x19c>
		case 0:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 7e       	andi	r24, 0xEF	; 239
    17ba:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    17bc:	af e4       	ldi	r26, 0x4F	; 79
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ef e4       	ldi	r30, 0x4F	; 79
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7d       	andi	r24, 0xDF	; 223
    17c8:	8c 93       	st	X, r24
    17ca:	32 c0       	rjmp	.+100    	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		case 1:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    17cc:	af e4       	ldi	r26, 0x4F	; 79
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e4       	ldi	r30, 0x4F	; 79
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 61       	ori	r24, 0x10	; 16
    17d8:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    17da:	af e4       	ldi	r26, 0x4F	; 79
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ef e4       	ldi	r30, 0x4F	; 79
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	8c 93       	st	X, r24
    17e8:	23 c0       	rjmp	.+70     	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		case 2:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    17ea:	af e4       	ldi	r26, 0x4F	; 79
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ef e4       	ldi	r30, 0x4F	; 79
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8f 7e       	andi	r24, 0xEF	; 239
    17f6:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    17f8:	af e4       	ldi	r26, 0x4F	; 79
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ef e4       	ldi	r30, 0x4F	; 79
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 62       	ori	r24, 0x20	; 32
    1804:	8c 93       	st	X, r24
    1806:	14 c0       	rjmp	.+40     	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		case 3:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1808:	af e4       	ldi	r26, 0x4F	; 79
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ef e4       	ldi	r30, 0x4F	; 79
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	80 61       	ori	r24, 0x10	; 16
    1814:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1816:	af e4       	ldi	r26, 0x4F	; 79
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ef e4       	ldi	r30, 0x4F	; 79
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 62       	ori	r24, 0x20	; 32
    1822:	8c 93       	st	X, r24
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <TIMER1_vidSetFastPwmMode+0x1a6>
			break;
		}
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
}
    1832:	27 96       	adiw	r28, 0x07	; 7
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <TIMER1_vidSetFreqPwmMode>:
u8 TIMER1_vidSetFreqPwmMode(TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e PwmMode, TIMER1_CHANNEL_e Channel)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	27 97       	sbiw	r28, 0x07	; 7
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	8a 83       	std	Y+2, r24	; 0x02
    185a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=RT_OK;
    185c:	19 82       	std	Y+1, r1	; 0x01
	if(Channel==TIMER1_CHANNEL_e_CHANNEL_A)
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 23       	and	r24, r24
    1862:	09 f0       	breq	.+2      	; 0x1866 <TIMER1_vidSetFreqPwmMode+0x22>
    1864:	5e c0       	rjmp	.+188    	; 0x1922 <TIMER1_vidSetFreqPwmMode+0xde>
	{
		switch (PwmMode) {
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3f 83       	std	Y+7, r19	; 0x07
    186e:	2e 83       	std	Y+6, r18	; 0x06
    1870:	8e 81       	ldd	r24, Y+6	; 0x06
    1872:	9f 81       	ldd	r25, Y+7	; 0x07
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	91 05       	cpc	r25, r1
    1878:	21 f1       	breq	.+72     	; 0x18c2 <TIMER1_vidSetFreqPwmMode+0x7e>
    187a:	2e 81       	ldd	r18, Y+6	; 0x06
    187c:	3f 81       	ldd	r19, Y+7	; 0x07
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	2c f4       	brge	.+10     	; 0x188e <TIMER1_vidSetFreqPwmMode+0x4a>
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	9f 81       	ldd	r25, Y+7	; 0x07
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	61 f0       	breq	.+24     	; 0x18a4 <TIMER1_vidSetFreqPwmMode+0x60>
    188c:	47 c0       	rjmp	.+142    	; 0x191c <TIMER1_vidSetFreqPwmMode+0xd8>
    188e:	2e 81       	ldd	r18, Y+6	; 0x06
    1890:	3f 81       	ldd	r19, Y+7	; 0x07
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	21 f1       	breq	.+72     	; 0x18e0 <TIMER1_vidSetFreqPwmMode+0x9c>
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	91 05       	cpc	r25, r1
    18a0:	71 f1       	breq	.+92     	; 0x18fe <TIMER1_vidSetFreqPwmMode+0xba>
    18a2:	3c c0       	rjmp	.+120    	; 0x191c <TIMER1_vidSetFreqPwmMode+0xd8>
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_NORMAL:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    18a4:	af e4       	ldi	r26, 0x4F	; 79
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ef e4       	ldi	r30, 0x4F	; 79
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8f 7b       	andi	r24, 0xBF	; 191
    18b0:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    18b2:	af e4       	ldi	r26, 0x4F	; 79
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ef e4       	ldi	r30, 0x4F	; 79
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 77       	andi	r24, 0x7F	; 127
    18be:	8c 93       	st	X, r24
    18c0:	94 c0       	rjmp	.+296    	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_TOGGLE_OC1A:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    18c2:	af e4       	ldi	r26, 0x4F	; 79
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	ef e4       	ldi	r30, 0x4F	; 79
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	80 64       	ori	r24, 0x40	; 64
    18ce:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    18d0:	af e4       	ldi	r26, 0x4F	; 79
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	ef e4       	ldi	r30, 0x4F	; 79
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8f 77       	andi	r24, 0x7F	; 127
    18dc:	8c 93       	st	X, r24
    18de:	85 c0       	rjmp	.+266    	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_CLEAR_ON_UPCOUNTING:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    18e0:	af e4       	ldi	r26, 0x4F	; 79
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ef e4       	ldi	r30, 0x4F	; 79
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8f 7b       	andi	r24, 0xBF	; 191
    18ec:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    18ee:	af e4       	ldi	r26, 0x4F	; 79
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e4       	ldi	r30, 0x4F	; 79
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	8c 93       	st	X, r24
    18fc:	76 c0       	rjmp	.+236    	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_SET_ON_UPCOUNTING:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    18fe:	af e4       	ldi	r26, 0x4F	; 79
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e4       	ldi	r30, 0x4F	; 79
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	80 64       	ori	r24, 0x40	; 64
    190a:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    190c:	af e4       	ldi	r26, 0x4F	; 79
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ef e4       	ldi	r30, 0x4F	; 79
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 68       	ori	r24, 0x80	; 128
    1918:	8c 93       	st	X, r24
    191a:	67 c0       	rjmp	.+206    	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	64 c0       	rjmp	.+200    	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		}
	}
	else if(Channel==TIMER1_CHANNEL_e_CHANNEL_B)
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	09 f0       	breq	.+2      	; 0x192a <TIMER1_vidSetFreqPwmMode+0xe6>
    1928:	5e c0       	rjmp	.+188    	; 0x19e6 <TIMER1_vidSetFreqPwmMode+0x1a2>
	{
		switch (PwmMode) {
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	3d 83       	std	Y+5, r19	; 0x05
    1932:	2c 83       	std	Y+4, r18	; 0x04
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	91 05       	cpc	r25, r1
    193c:	21 f1       	breq	.+72     	; 0x1986 <TIMER1_vidSetFreqPwmMode+0x142>
    193e:	2c 81       	ldd	r18, Y+4	; 0x04
    1940:	3d 81       	ldd	r19, Y+5	; 0x05
    1942:	22 30       	cpi	r18, 0x02	; 2
    1944:	31 05       	cpc	r19, r1
    1946:	2c f4       	brge	.+10     	; 0x1952 <TIMER1_vidSetFreqPwmMode+0x10e>
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	9d 81       	ldd	r25, Y+5	; 0x05
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	61 f0       	breq	.+24     	; 0x1968 <TIMER1_vidSetFreqPwmMode+0x124>
    1950:	47 c0       	rjmp	.+142    	; 0x19e0 <TIMER1_vidSetFreqPwmMode+0x19c>
    1952:	2c 81       	ldd	r18, Y+4	; 0x04
    1954:	3d 81       	ldd	r19, Y+5	; 0x05
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	21 f1       	breq	.+72     	; 0x19a4 <TIMER1_vidSetFreqPwmMode+0x160>
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	91 05       	cpc	r25, r1
    1964:	71 f1       	breq	.+92     	; 0x19c2 <TIMER1_vidSetFreqPwmMode+0x17e>
    1966:	3c c0       	rjmp	.+120    	; 0x19e0 <TIMER1_vidSetFreqPwmMode+0x19c>
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_NORMAL:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1968:	af e4       	ldi	r26, 0x4F	; 79
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ef e4       	ldi	r30, 0x4F	; 79
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 7e       	andi	r24, 0xEF	; 239
    1974:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1976:	af e4       	ldi	r26, 0x4F	; 79
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ef e4       	ldi	r30, 0x4F	; 79
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 7d       	andi	r24, 0xDF	; 223
    1982:	8c 93       	st	X, r24
    1984:	32 c0       	rjmp	.+100    	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_TOGGLE_OC1A:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1986:	af e4       	ldi	r26, 0x4F	; 79
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ef e4       	ldi	r30, 0x4F	; 79
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 61       	ori	r24, 0x10	; 16
    1992:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1994:	af e4       	ldi	r26, 0x4F	; 79
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ef e4       	ldi	r30, 0x4F	; 79
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	8f 7d       	andi	r24, 0xDF	; 223
    19a0:	8c 93       	st	X, r24
    19a2:	23 c0       	rjmp	.+70     	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_CLEAR_ON_UPCOUNTING:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    19a4:	af e4       	ldi	r26, 0x4F	; 79
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e4       	ldi	r30, 0x4F	; 79
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7e       	andi	r24, 0xEF	; 239
    19b0:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    19b2:	af e4       	ldi	r26, 0x4F	; 79
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef e4       	ldi	r30, 0x4F	; 79
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 62       	ori	r24, 0x20	; 32
    19be:	8c 93       	st	X, r24
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_COMPARE_e_SET_ON_UPCOUNTING:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    19c2:	af e4       	ldi	r26, 0x4F	; 79
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	ef e4       	ldi	r30, 0x4F	; 79
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	80 61       	ori	r24, 0x10	; 16
    19ce:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    19d0:	af e4       	ldi	r26, 0x4F	; 79
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ef e4       	ldi	r30, 0x4F	; 79
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 62       	ori	r24, 0x20	; 32
    19dc:	8c 93       	st	X, r24
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <TIMER1_vidSetFreqPwmMode+0x1a6>
			break;
		}
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	27 96       	adiw	r28, 0x07	; 7
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <TIMER1_vidSetNonPwmMode>:
u8 TIMER1_vidSetNonPwmMode(TIMER1_NON_PWM_COMPARE_e PwmMode, TIMER1_CHANNEL_e Channel)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	27 97       	sbiw	r28, 0x07	; 7
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus=RT_OK;
    1a16:	19 82       	std	Y+1, r1	; 0x01
	if(Channel==TIMER1_CHANNEL_e_CHANNEL_A)
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 23       	and	r24, r24
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <TIMER1_vidSetNonPwmMode+0x22>
    1a1e:	5e c0       	rjmp	.+188    	; 0x1adc <TIMER1_vidSetNonPwmMode+0xde>
	{
		switch (PwmMode) {
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3f 83       	std	Y+7, r19	; 0x07
    1a28:	2e 83       	std	Y+6, r18	; 0x06
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	91 05       	cpc	r25, r1
    1a32:	21 f1       	breq	.+72     	; 0x1a7c <TIMER1_vidSetNonPwmMode+0x7e>
    1a34:	2e 81       	ldd	r18, Y+6	; 0x06
    1a36:	3f 81       	ldd	r19, Y+7	; 0x07
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <TIMER1_vidSetNonPwmMode+0x4a>
    1a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a40:	9f 81       	ldd	r25, Y+7	; 0x07
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <TIMER1_vidSetNonPwmMode+0x60>
    1a46:	47 c0       	rjmp	.+142    	; 0x1ad6 <TIMER1_vidSetNonPwmMode+0xd8>
    1a48:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	21 f1       	breq	.+72     	; 0x1a9a <TIMER1_vidSetNonPwmMode+0x9c>
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	91 05       	cpc	r25, r1
    1a5a:	71 f1       	breq	.+92     	; 0x1ab8 <TIMER1_vidSetNonPwmMode+0xba>
    1a5c:	3c c0       	rjmp	.+120    	; 0x1ad6 <TIMER1_vidSetNonPwmMode+0xd8>
		case TIMER1_NON_PWM_COMPARE_e_NORMAL:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1a5e:	af e4       	ldi	r26, 0x4F	; 79
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	ef e4       	ldi	r30, 0x4F	; 79
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 7b       	andi	r24, 0xBF	; 191
    1a6a:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1a6c:	af e4       	ldi	r26, 0x4F	; 79
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ef e4       	ldi	r30, 0x4F	; 79
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 77       	andi	r24, 0x7F	; 127
    1a78:	8c 93       	st	X, r24
    1a7a:	94 c0       	rjmp	.+296    	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		case TIMER1_NON_PWM_COMPARE_e_TOGGLE_OC1A_OC1B:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1a7c:	af e4       	ldi	r26, 0x4F	; 79
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ef e4       	ldi	r30, 0x4F	; 79
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 64       	ori	r24, 0x40	; 64
    1a88:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1a8a:	af e4       	ldi	r26, 0x4F	; 79
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ef e4       	ldi	r30, 0x4F	; 79
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 77       	andi	r24, 0x7F	; 127
    1a96:	8c 93       	st	X, r24
    1a98:	85 c0       	rjmp	.+266    	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		case TIMER1_NON_PWM_COMPARE_e_CLEAR_OC1A_OC1B:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1a9a:	af e4       	ldi	r26, 0x4F	; 79
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	ef e4       	ldi	r30, 0x4F	; 79
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8f 7b       	andi	r24, 0xBF	; 191
    1aa6:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1aa8:	af e4       	ldi	r26, 0x4F	; 79
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ef e4       	ldi	r30, 0x4F	; 79
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 68       	ori	r24, 0x80	; 128
    1ab4:	8c 93       	st	X, r24
    1ab6:	76 c0       	rjmp	.+236    	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		case TIMER1_NON_PWM_COMPARE_e_SET_OC1A_OC1B:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A0);
    1ab8:	af e4       	ldi	r26, 0x4F	; 79
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ef e4       	ldi	r30, 0x4F	; 79
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	80 64       	ori	r24, 0x40	; 64
    1ac4:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1A1);
    1ac6:	af e4       	ldi	r26, 0x4F	; 79
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	ef e4       	ldi	r30, 0x4F	; 79
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 68       	ori	r24, 0x80	; 128
    1ad2:	8c 93       	st	X, r24
    1ad4:	67 c0       	rjmp	.+206    	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	64 c0       	rjmp	.+200    	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		}
	}
	else if(Channel==TIMER1_CHANNEL_e_CHANNEL_B)
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <TIMER1_vidSetNonPwmMode+0xe6>
    1ae2:	5e c0       	rjmp	.+188    	; 0x1ba0 <TIMER1_vidSetNonPwmMode+0x1a2>
	{
		switch (PwmMode) {
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3d 83       	std	Y+5, r19	; 0x05
    1aec:	2c 83       	std	Y+4, r18	; 0x04
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	91 05       	cpc	r25, r1
    1af6:	21 f1       	breq	.+72     	; 0x1b40 <TIMER1_vidSetNonPwmMode+0x142>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <TIMER1_vidSetNonPwmMode+0x10e>
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	9d 81       	ldd	r25, Y+5	; 0x05
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <TIMER1_vidSetNonPwmMode+0x124>
    1b0a:	47 c0       	rjmp	.+142    	; 0x1b9a <TIMER1_vidSetNonPwmMode+0x19c>
    1b0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	21 f1       	breq	.+72     	; 0x1b5e <TIMER1_vidSetNonPwmMode+0x160>
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	71 f1       	breq	.+92     	; 0x1b7c <TIMER1_vidSetNonPwmMode+0x17e>
    1b20:	3c c0       	rjmp	.+120    	; 0x1b9a <TIMER1_vidSetNonPwmMode+0x19c>
		case TIMER1_NON_PWM_COMPARE_e_NORMAL:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1b22:	af e4       	ldi	r26, 0x4F	; 79
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	ef e4       	ldi	r30, 0x4F	; 79
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 7e       	andi	r24, 0xEF	; 239
    1b2e:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1b30:	af e4       	ldi	r26, 0x4F	; 79
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ef e4       	ldi	r30, 0x4F	; 79
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8f 7d       	andi	r24, 0xDF	; 223
    1b3c:	8c 93       	st	X, r24
    1b3e:	32 c0       	rjmp	.+100    	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		case TIMER1_NON_PWM_COMPARE_e_TOGGLE_OC1A_OC1B:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1b40:	af e4       	ldi	r26, 0x4F	; 79
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ef e4       	ldi	r30, 0x4F	; 79
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 61       	ori	r24, 0x10	; 16
    1b4c:	8c 93       	st	X, r24
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1b4e:	af e4       	ldi	r26, 0x4F	; 79
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ef e4       	ldi	r30, 0x4F	; 79
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7d       	andi	r24, 0xDF	; 223
    1b5a:	8c 93       	st	X, r24
    1b5c:	23 c0       	rjmp	.+70     	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		case TIMER1_NON_PWM_COMPARE_e_CLEAR_OC1A_OC1B:
			Clr_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1b5e:	af e4       	ldi	r26, 0x4F	; 79
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	ef e4       	ldi	r30, 0x4F	; 79
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7e       	andi	r24, 0xEF	; 239
    1b6a:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1b6c:	af e4       	ldi	r26, 0x4F	; 79
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ef e4       	ldi	r30, 0x4F	; 79
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 62       	ori	r24, 0x20	; 32
    1b78:	8c 93       	st	X, r24
    1b7a:	14 c0       	rjmp	.+40     	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		case TIMER1_NON_PWM_COMPARE_e_SET_OC1A_OC1B:
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B0);
    1b7c:	af e4       	ldi	r26, 0x4F	; 79
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	ef e4       	ldi	r30, 0x4F	; 79
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 61       	ori	r24, 0x10	; 16
    1b88:	8c 93       	st	X, r24
			Set_Bit(TCCR1A_REG,TIMER1_TCCR1A_e_COM1B1);
    1b8a:	af e4       	ldi	r26, 0x4F	; 79
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ef e4       	ldi	r30, 0x4F	; 79
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 62       	ori	r24, 0x20	; 32
    1b96:	8c 93       	st	X, r24
    1b98:	05 c0       	rjmp	.+10     	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		default:
			Local_u8ErrorStatus=RT_NOK;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <TIMER1_vidSetNonPwmMode+0x1a6>
			break;
		}
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba6:	27 96       	adiw	r28, 0x07	; 7
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <TIMER1_vidSetPreload>:
void TIMER1_vidStartTimer(void);
void TIMER1_vidStopTimer(void);
void TIMER1_vidSetPreload(u16 Copy_u16Preload)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <TIMER1_vidSetPreload+0x6>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=Copy_u16Preload;
    1bc6:	ec e4       	ldi	r30, 0x4C	; 76
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <TIMER1_vidSetCTCA>:
void TIMER1_vidSetCTCA(u16 Copy_u16CTC)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <TIMER1_vidSetCTCA+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG=Copy_u16CTC;
    1bea:	ea e4       	ldi	r30, 0x4A	; 74
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <TIMER1_vidSetCTCB>:
void TIMER1_vidSetCTCB(u16 Copy_u16CTC)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <TIMER1_vidSetCTCB+0x6>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=Copy_u16CTC;
    1c0e:	e8 e4       	ldi	r30, 0x48	; 72
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <TIMER1_vidTovfInteruptEnable>:
void TIMER1_vidTovfInteruptEnable(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK_REG,TIMER1_TIMSK_e_TOIE1);
    1c2c:	a9 e5       	ldi	r26, 0x59	; 89
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e9 e5       	ldi	r30, 0x59	; 89
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	84 60       	ori	r24, 0x04	; 4
    1c38:	8c 93       	st	X, r24
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <TIMER1_vidTovfInteruptDisable>:
void TIMER1_vidTovfInteruptDisable(void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK_REG,TIMER1_TIMSK_e_TOIE1);
    1c48:	a9 e5       	ldi	r26, 0x59	; 89
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e9 e5       	ldi	r30, 0x59	; 89
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8b 7f       	andi	r24, 0xFB	; 251
    1c54:	8c 93       	st	X, r24
}
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <TIMER1_vidCtcAInteruptEnable>:
void TIMER1_vidCtcAInteruptEnable(void)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK_REG,TIMER1_TIMSK_e_OCIE1A);
    1c64:	a9 e5       	ldi	r26, 0x59	; 89
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e9 e5       	ldi	r30, 0x59	; 89
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 61       	ori	r24, 0x10	; 16
    1c70:	8c 93       	st	X, r24
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <TIMER1_vidCtcAInteruptDisable>:
void TIMER1_vidCtcAInteruptDisable(void)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK_REG,TIMER1_TIMSK_e_OCIE1A);
    1c80:	a9 e5       	ldi	r26, 0x59	; 89
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e9 e5       	ldi	r30, 0x59	; 89
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7e       	andi	r24, 0xEF	; 239
    1c8c:	8c 93       	st	X, r24
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <TIMER1_vidCtcBInteruptEnable>:
void TIMER1_vidCtcBInteruptEnable(void)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK_REG,TIMER1_TIMSK_e_OCIE1B);
    1c9c:	a9 e5       	ldi	r26, 0x59	; 89
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e9 e5       	ldi	r30, 0x59	; 89
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 60       	ori	r24, 0x08	; 8
    1ca8:	8c 93       	st	X, r24
}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <TIMER1_vidCtcBInteruptDisable>:
void TIMER1_vidCtcBInteruptDisable(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK_REG,TIMER1_TIMSK_e_OCIE1B);
    1cb8:	a9 e5       	ldi	r26, 0x59	; 89
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e9 e5       	ldi	r30, 0x59	; 89
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	87 7f       	andi	r24, 0xF7	; 247
    1cc4:	8c 93       	st	X, r24
}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <TIMER1_vidICRInteruptEnable>:
void TIMER1_vidICRInteruptEnable(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK_REG,TIMER1_TIMSK_e_TICIE1);
    1cd4:	a9 e5       	ldi	r26, 0x59	; 89
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e9 e5       	ldi	r30, 0x59	; 89
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	80 62       	ori	r24, 0x20	; 32
    1ce0:	8c 93       	st	X, r24
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <TIMER1_vidICRInteruptDisable>:
void TIMER1_vidICRInteruptDisable(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK_REG,TIMER1_TIMSK_e_TICIE1);
    1cf0:	a9 e5       	ldi	r26, 0x59	; 89
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e9 e5       	ldi	r30, 0x59	; 89
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8f 7d       	andi	r24, 0xDF	; 223
    1cfc:	8c 93       	st	X, r24
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <TIMER1_vidSetPwmADutyCycle>:
void TIMER1_vidSetPwmADutyCycle(u16 Copy_u16DutyCycle)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <TIMER1_vidSetPwmADutyCycle+0x6>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG=Copy_u16DutyCycle;
    1d12:	ea e4       	ldi	r30, 0x4A	; 74
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <TIMER1_vidSetPwmBDutyCycle>:
void TIMER1_vidSetPwmBDutyCycle(u16 Copy_u16DutyCycle)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <TIMER1_vidSetPwmBDutyCycle+0x6>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=Copy_u16DutyCycle;
    1d36:	e8 e4       	ldi	r30, 0x48	; 72
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <TIMER1_vidSetICRValue>:
void TIMER1_vidSetICRValue(u16 Copy_u16ICRValue)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <TIMER1_vidSetICRValue+0x6>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG=Copy_u16ICRValue;
    1d5a:	e6 e4       	ldi	r30, 0x46	; 70
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <TIMER1_u8SetOvfCbf>:

u8 TIMER1_u8SetOvfCbf(void(*fptr)(void))
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <TIMER1_u8SetOvfCbf+0x6>
    1d76:	0f 92       	push	r0
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9b 83       	std	Y+3, r25	; 0x03
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=RT_OK;
    1d80:	19 82       	std	Y+1, r1	; 0x01
	if(fptr!=NULL)
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	9b 81       	ldd	r25, Y+3	; 0x03
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	39 f0       	breq	.+14     	; 0x1d98 <TIMER1_u8SetOvfCbf+0x28>
	{
		OVFADDR=fptr;
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8e:	90 93 69 01 	sts	0x0169, r25
    1d92:	80 93 68 01 	sts	0x0168, r24
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <TIMER1_u8SetOvfCbf+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <TIMER1_u8SetCtcACbf>:
u8 TIMER1_u8SetCtcACbf(void(*fptr)(void))
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <TIMER1_u8SetCtcACbf+0x6>
    1db0:	0f 92       	push	r0
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	9b 83       	std	Y+3, r25	; 0x03
    1db8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=RT_OK;
    1dba:	19 82       	std	Y+1, r1	; 0x01
	if(fptr!=NULL)
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	39 f0       	breq	.+14     	; 0x1dd2 <TIMER1_u8SetCtcACbf+0x28>
	{
		CTCAADDR=fptr;
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	90 93 6b 01 	sts	0x016B, r25
    1dcc:	80 93 6a 01 	sts	0x016A, r24
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <TIMER1_u8SetCtcACbf+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <TIMER1_u8SetCtcBCbf>:
u8 TIMER1_u8SetCtcBCbf(void(*fptr)(void))
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <TIMER1_u8SetCtcBCbf+0x6>
    1dea:	0f 92       	push	r0
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	9b 83       	std	Y+3, r25	; 0x03
    1df2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=RT_OK;
    1df4:	19 82       	std	Y+1, r1	; 0x01
	if(fptr!=NULL)
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	39 f0       	breq	.+14     	; 0x1e0c <TIMER1_u8SetCtcBCbf+0x28>
	{
		CTCBADDR=fptr;
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	90 93 6d 01 	sts	0x016D, r25
    1e06:	80 93 6c 01 	sts	0x016C, r24
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <TIMER1_u8SetCtcBCbf+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <TIMER1_u8SetICRCbf>:
u8 TIMER1_u8SetICRCbf(void(*fptr)(void))
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <TIMER1_u8SetICRCbf+0x6>
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=RT_OK;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
	if(fptr!=NULL)
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	39 f0       	breq	.+14     	; 0x1e46 <TIMER1_u8SetICRCbf+0x28>
	{
		ICRADDR=fptr;
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	90 93 6f 01 	sts	0x016F, r25
    1e40:	80 93 6e 01 	sts	0x016E, r24
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <TIMER1_u8SetICRCbf+0x2c>
	}
	else
	{
		Local_u8ErrorStatus=RT_NOK;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <__vector_6>:

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    1e58:	1f 92       	push	r1
    1e5a:	0f 92       	push	r0
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	0f 92       	push	r0
    1e60:	11 24       	eor	r1, r1
    1e62:	2f 93       	push	r18
    1e64:	3f 93       	push	r19
    1e66:	4f 93       	push	r20
    1e68:	5f 93       	push	r21
    1e6a:	6f 93       	push	r22
    1e6c:	7f 93       	push	r23
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	af 93       	push	r26
    1e74:	bf 93       	push	r27
    1e76:	ef 93       	push	r30
    1e78:	ff 93       	push	r31
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	if(OVFADDR!=NULL)
    1e82:	80 91 68 01 	lds	r24, 0x0168
    1e86:	90 91 69 01 	lds	r25, 0x0169
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	29 f0       	breq	.+10     	; 0x1e98 <__vector_6+0x40>
	{
		ICRADDR();
    1e8e:	e0 91 6e 01 	lds	r30, 0x016E
    1e92:	f0 91 6f 01 	lds	r31, 0x016F
    1e96:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	ff 91       	pop	r31
    1e9e:	ef 91       	pop	r30
    1ea0:	bf 91       	pop	r27
    1ea2:	af 91       	pop	r26
    1ea4:	9f 91       	pop	r25
    1ea6:	8f 91       	pop	r24
    1ea8:	7f 91       	pop	r23
    1eaa:	6f 91       	pop	r22
    1eac:	5f 91       	pop	r21
    1eae:	4f 91       	pop	r20
    1eb0:	3f 91       	pop	r19
    1eb2:	2f 91       	pop	r18
    1eb4:	0f 90       	pop	r0
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	0f 90       	pop	r0
    1eba:	1f 90       	pop	r1
    1ebc:	18 95       	reti

00001ebe <__vector_7>:

void __vector_7 (void) __attribute__ ((signal));
void __vector_7 (void)
{
    1ebe:	1f 92       	push	r1
    1ec0:	0f 92       	push	r0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	0f 92       	push	r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	2f 93       	push	r18
    1eca:	3f 93       	push	r19
    1ecc:	4f 93       	push	r20
    1ece:	5f 93       	push	r21
    1ed0:	6f 93       	push	r22
    1ed2:	7f 93       	push	r23
    1ed4:	8f 93       	push	r24
    1ed6:	9f 93       	push	r25
    1ed8:	af 93       	push	r26
    1eda:	bf 93       	push	r27
    1edc:	ef 93       	push	r30
    1ede:	ff 93       	push	r31
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
	if(CTCAADDR!=NULL)
    1ee8:	80 91 6a 01 	lds	r24, 0x016A
    1eec:	90 91 6b 01 	lds	r25, 0x016B
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	29 f0       	breq	.+10     	; 0x1efe <__vector_7+0x40>
	{
		CTCAADDR();
    1ef4:	e0 91 6a 01 	lds	r30, 0x016A
    1ef8:	f0 91 6b 01 	lds	r31, 0x016B
    1efc:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	ff 91       	pop	r31
    1f04:	ef 91       	pop	r30
    1f06:	bf 91       	pop	r27
    1f08:	af 91       	pop	r26
    1f0a:	9f 91       	pop	r25
    1f0c:	8f 91       	pop	r24
    1f0e:	7f 91       	pop	r23
    1f10:	6f 91       	pop	r22
    1f12:	5f 91       	pop	r21
    1f14:	4f 91       	pop	r20
    1f16:	3f 91       	pop	r19
    1f18:	2f 91       	pop	r18
    1f1a:	0f 90       	pop	r0
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	0f 90       	pop	r0
    1f20:	1f 90       	pop	r1
    1f22:	18 95       	reti

00001f24 <__vector_8>:

void __vector_8 (void) __attribute__ ((signal));
void __vector_8 (void)
{
    1f24:	1f 92       	push	r1
    1f26:	0f 92       	push	r0
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	0f 92       	push	r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	2f 93       	push	r18
    1f30:	3f 93       	push	r19
    1f32:	4f 93       	push	r20
    1f34:	5f 93       	push	r21
    1f36:	6f 93       	push	r22
    1f38:	7f 93       	push	r23
    1f3a:	8f 93       	push	r24
    1f3c:	9f 93       	push	r25
    1f3e:	af 93       	push	r26
    1f40:	bf 93       	push	r27
    1f42:	ef 93       	push	r30
    1f44:	ff 93       	push	r31
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	if(CTCBADDR!=NULL)
    1f4e:	80 91 6c 01 	lds	r24, 0x016C
    1f52:	90 91 6d 01 	lds	r25, 0x016D
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	29 f0       	breq	.+10     	; 0x1f64 <__vector_8+0x40>
	{
		CTCBADDR();
    1f5a:	e0 91 6c 01 	lds	r30, 0x016C
    1f5e:	f0 91 6d 01 	lds	r31, 0x016D
    1f62:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_9>:

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	if(OVFADDR!=NULL)
    1fb4:	80 91 68 01 	lds	r24, 0x0168
    1fb8:	90 91 69 01 	lds	r25, 0x0169
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	29 f0       	breq	.+10     	; 0x1fca <__vector_9+0x40>
	{
		OVFADDR();
    1fc0:	e0 91 68 01 	lds	r30, 0x0168
    1fc4:	f0 91 69 01 	lds	r31, 0x0169
    1fc8:	09 95       	icall
	}
	else
	{
		/*Do Nothing*/
	}
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	7f 91       	pop	r23
    1fdc:	6f 91       	pop	r22
    1fde:	5f 91       	pop	r21
    1fe0:	4f 91       	pop	r20
    1fe2:	3f 91       	pop	r19
    1fe4:	2f 91       	pop	r18
    1fe6:	0f 90       	pop	r0
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	0f 90       	pop	r0
    1fec:	1f 90       	pop	r1
    1fee:	18 95       	reti

00001ff0 <INT_u8SetGlobalInterruptStatus>:
#include "LIB\bitmath.h"

#include "INT_REG.h"
#include "INT_INT.h"
u8 INT_u8SetGlobalInterruptStatus(GIE_STATUS Status)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <INT_u8SetGlobalInterruptStatus+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <INT_u8SetGlobalInterruptStatus+0x8>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=RT_OK;
    1ffe:	19 82       	std	Y+1, r1	; 0x01
	switch (Status)
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3c 83       	std	Y+4, r19	; 0x04
    2008:	2b 83       	std	Y+3, r18	; 0x03
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	31 f0       	breq	.+12     	; 0x201e <INT_u8SetGlobalInterruptStatus+0x2e>
    2012:	2b 81       	ldd	r18, Y+3	; 0x03
    2014:	3c 81       	ldd	r19, Y+4	; 0x04
    2016:	21 30       	cpi	r18, 0x01	; 1
    2018:	31 05       	cpc	r19, r1
    201a:	49 f0       	breq	.+18     	; 0x202e <INT_u8SetGlobalInterruptStatus+0x3e>
    201c:	10 c0       	rjmp	.+32     	; 0x203e <INT_u8SetGlobalInterruptStatus+0x4e>
	{
		case GIE_Disable:
			Clr_Bit(SREG_REG,GLOBAL_INT);
    201e:	af e5       	ldi	r26, 0x5F	; 95
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ef e5       	ldi	r30, 0x5F	; 95
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	8f 77       	andi	r24, 0x7F	; 127
    202a:	8c 93       	st	X, r24
    202c:	0a c0       	rjmp	.+20     	; 0x2042 <INT_u8SetGlobalInterruptStatus+0x52>
			break;
		case GIE_Enable:
			Set_Bit(SREG_REG,GLOBAL_INT);
    202e:	af e5       	ldi	r26, 0x5F	; 95
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ef e5       	ldi	r30, 0x5F	; 95
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 68       	ori	r24, 0x80	; 128
    203a:	8c 93       	st	X, r24
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <INT_u8SetGlobalInterruptStatus+0x52>
			break;
		default:
			Local_u8ErrorStatus= RT_NOK;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    2042:	89 81       	ldd	r24, Y+1	; 0x01
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <DIO_u8SetPortDir>:

#include "DIO_REG.h"
#include"DIO_INT.h"

u8 DIO_u8SetPortDir(DIO_PORT PortNo,u8 Copy_u8Dir)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	00 d0       	rcall	.+0      	; 0x2058 <DIO_u8SetPortDir+0x6>
    2058:	00 d0       	rcall	.+0      	; 0x205a <DIO_u8SetPortDir+0x8>
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus=RT_OK;
    2064:	19 82       	std	Y+1, r1	; 0x01
	if(PortNo>=DIO_PORTA && PortNo<=DIO_PORTD)
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	b0 f5       	brcc	.+108    	; 0x20d8 <DIO_u8SetPortDir+0x86>
	{
		switch (PortNo)
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	3d 83       	std	Y+5, r19	; 0x05
    2074:	2c 83       	std	Y+4, r18	; 0x04
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	d1 f0       	breq	.+52     	; 0x20b4 <DIO_u8SetPortDir+0x62>
    2080:	2c 81       	ldd	r18, Y+4	; 0x04
    2082:	3d 81       	ldd	r19, Y+5	; 0x05
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <DIO_u8SetPortDir+0x42>
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	61 f0       	breq	.+24     	; 0x20aa <DIO_u8SetPortDir+0x58>
    2092:	1f c0       	rjmp	.+62     	; 0x20d2 <DIO_u8SetPortDir+0x80>
    2094:	2c 81       	ldd	r18, Y+4	; 0x04
    2096:	3d 81       	ldd	r19, Y+5	; 0x05
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	81 f0       	breq	.+32     	; 0x20be <DIO_u8SetPortDir+0x6c>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	81 f0       	breq	.+32     	; 0x20c8 <DIO_u8SetPortDir+0x76>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <DIO_u8SetPortDir+0x80>
		{
			case DIO_PORTA:
				DDRA_REG=Copy_u8Dir;
    20aa:	ea e3       	ldi	r30, 0x3A	; 58
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	80 83       	st	Z, r24
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <DIO_u8SetPortDir+0x8a>
				break;
			case DIO_PORTB:
				DDRB_REG=Copy_u8Dir;
    20b4:	e7 e3       	ldi	r30, 0x37	; 55
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	80 83       	st	Z, r24
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <DIO_u8SetPortDir+0x8a>
				break;
			case DIO_PORTC:
				DDRC_REG=Copy_u8Dir;
    20be:	e4 e3       	ldi	r30, 0x34	; 52
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	80 83       	st	Z, r24
    20c6:	0a c0       	rjmp	.+20     	; 0x20dc <DIO_u8SetPortDir+0x8a>
				break;
			case DIO_PORTD:
				DDRD_REG=Copy_u8Dir;
    20c8:	e1 e3       	ldi	r30, 0x31	; 49
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	80 83       	st	Z, r24
    20d0:	05 c0       	rjmp	.+10     	; 0x20dc <DIO_u8SetPortDir+0x8a>
				break;
			default:
				Local_u8ErrStatus=RT_NOK;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_u8SetPortDir+0x8a>
				break;
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrStatus;
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <DIO_u8SetPortVal>:
u8 DIO_u8SetPortVal(DIO_PORT PortNo,u8 Copy_u8Val)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <DIO_u8SetPortVal+0x6>
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <DIO_u8SetPortVal+0x8>
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus=RT_OK;
    2100:	19 82       	std	Y+1, r1	; 0x01
	if(PortNo>=DIO_PORTA && PortNo<=DIO_PORTD)
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	84 30       	cpi	r24, 0x04	; 4
    2106:	b0 f5       	brcc	.+108    	; 0x2174 <DIO_u8SetPortVal+0x86>
	{
		switch (PortNo)
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	3d 83       	std	Y+5, r19	; 0x05
    2110:	2c 83       	std	Y+4, r18	; 0x04
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	d1 f0       	breq	.+52     	; 0x2150 <DIO_u8SetPortVal+0x62>
    211c:	2c 81       	ldd	r18, Y+4	; 0x04
    211e:	3d 81       	ldd	r19, Y+5	; 0x05
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	2c f4       	brge	.+10     	; 0x2130 <DIO_u8SetPortVal+0x42>
    2126:	8c 81       	ldd	r24, Y+4	; 0x04
    2128:	9d 81       	ldd	r25, Y+5	; 0x05
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	61 f0       	breq	.+24     	; 0x2146 <DIO_u8SetPortVal+0x58>
    212e:	1f c0       	rjmp	.+62     	; 0x216e <DIO_u8SetPortVal+0x80>
    2130:	2c 81       	ldd	r18, Y+4	; 0x04
    2132:	3d 81       	ldd	r19, Y+5	; 0x05
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	31 05       	cpc	r19, r1
    2138:	81 f0       	breq	.+32     	; 0x215a <DIO_u8SetPortVal+0x6c>
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	83 30       	cpi	r24, 0x03	; 3
    2140:	91 05       	cpc	r25, r1
    2142:	81 f0       	breq	.+32     	; 0x2164 <DIO_u8SetPortVal+0x76>
    2144:	14 c0       	rjmp	.+40     	; 0x216e <DIO_u8SetPortVal+0x80>
		{
			case DIO_PORTA:
				PORTA_REG=Copy_u8Val;
    2146:	eb e3       	ldi	r30, 0x3B	; 59
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	80 83       	st	Z, r24
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <DIO_u8SetPortVal+0x8a>
				break;
			case DIO_PORTB:
				PORTB_REG=Copy_u8Val;
    2150:	e8 e3       	ldi	r30, 0x38	; 56
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	80 83       	st	Z, r24
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <DIO_u8SetPortVal+0x8a>
				break;
			case DIO_PORTC:
				PORTC_REG=Copy_u8Val;
    215a:	e5 e3       	ldi	r30, 0x35	; 53
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	80 83       	st	Z, r24
    2162:	0a c0       	rjmp	.+20     	; 0x2178 <DIO_u8SetPortVal+0x8a>
				break;
			case DIO_PORTD:
				PORTD_REG=Copy_u8Val;
    2164:	e2 e3       	ldi	r30, 0x32	; 50
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	80 83       	st	Z, r24
    216c:	05 c0       	rjmp	.+10     	; 0x2178 <DIO_u8SetPortVal+0x8a>
				break;
			default:
				Local_u8ErrStatus=RT_NOK;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <DIO_u8SetPortVal+0x8a>
				break;
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrStatus;
    2178:	89 81       	ldd	r24, Y+1	; 0x01
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <DIO_u8GetPortVal>:
u8 DIO_u8GetPortVal(DIO_PORT PortNo,u8* Copy_u8PVal)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_u8GetPortVal+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <DIO_u8GetPortVal+0x8>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <DIO_u8GetPortVal+0xa>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	7c 83       	std	Y+4, r23	; 0x04
    219c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrStatus=RT_OK;
    219e:	19 82       	std	Y+1, r1	; 0x01
	if(PortNo>=DIO_PORTA && PortNo<=DIO_PORTD)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <DIO_u8GetPortVal+0x1e>
    21a6:	3e c0       	rjmp	.+124    	; 0x2224 <DIO_u8GetPortVal+0x9a>
	{
		switch (PortNo)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	3e 83       	std	Y+6, r19	; 0x06
    21b0:	2d 83       	std	Y+5, r18	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	e1 f0       	breq	.+56     	; 0x21f4 <DIO_u8GetPortVal+0x6a>
    21bc:	2d 81       	ldd	r18, Y+5	; 0x05
    21be:	3e 81       	ldd	r19, Y+6	; 0x06
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <DIO_u8GetPortVal+0x46>
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <DIO_u8GetPortVal+0x5c>
    21ce:	27 c0       	rjmp	.+78     	; 0x221e <DIO_u8GetPortVal+0x94>
    21d0:	2d 81       	ldd	r18, Y+5	; 0x05
    21d2:	3e 81       	ldd	r19, Y+6	; 0x06
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	a1 f0       	breq	.+40     	; 0x2202 <DIO_u8GetPortVal+0x78>
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	91 05       	cpc	r25, r1
    21e2:	b1 f0       	breq	.+44     	; 0x2210 <DIO_u8GetPortVal+0x86>
    21e4:	1c c0       	rjmp	.+56     	; 0x221e <DIO_u8GetPortVal+0x94>
		{
			case DIO_PORTA:
				*Copy_u8PVal=PINA_REG;
    21e6:	e9 e3       	ldi	r30, 0x39	; 57
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	eb 81       	ldd	r30, Y+3	; 0x03
    21ee:	fc 81       	ldd	r31, Y+4	; 0x04
    21f0:	80 83       	st	Z, r24
    21f2:	1a c0       	rjmp	.+52     	; 0x2228 <DIO_u8GetPortVal+0x9e>
				break;
			case DIO_PORTB:
				*Copy_u8PVal=PINB_REG;
    21f4:	e6 e3       	ldi	r30, 0x36	; 54
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	eb 81       	ldd	r30, Y+3	; 0x03
    21fc:	fc 81       	ldd	r31, Y+4	; 0x04
    21fe:	80 83       	st	Z, r24
    2200:	13 c0       	rjmp	.+38     	; 0x2228 <DIO_u8GetPortVal+0x9e>
				break;
			case DIO_PORTC:
				*Copy_u8PVal=PINC_REG;
    2202:	e3 e3       	ldi	r30, 0x33	; 51
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	eb 81       	ldd	r30, Y+3	; 0x03
    220a:	fc 81       	ldd	r31, Y+4	; 0x04
    220c:	80 83       	st	Z, r24
    220e:	0c c0       	rjmp	.+24     	; 0x2228 <DIO_u8GetPortVal+0x9e>
				break;
			case DIO_PORTD:
				*Copy_u8PVal=PIND_REG;
    2210:	e0 e3       	ldi	r30, 0x30	; 48
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	eb 81       	ldd	r30, Y+3	; 0x03
    2218:	fc 81       	ldd	r31, Y+4	; 0x04
    221a:	80 83       	st	Z, r24
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <DIO_u8GetPortVal+0x9e>
				break;
			default:
				Local_u8ErrStatus=RT_NOK;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_u8GetPortVal+0x9e>
				break;
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrStatus;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	26 96       	adiw	r28, 0x06	; 6
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <DIO_u8SetPinDir>:
u8 DIO_u8SetPinDir(DIO_PORT PortNo,DIO_PIN PinNo,u8 Copy_u8Dir)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	28 97       	sbiw	r28, 0x08	; 8
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	8a 83       	std	Y+2, r24	; 0x02
    2252:	6b 83       	std	Y+3, r22	; 0x03
    2254:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus=RT_OK;
    2256:	19 82       	std	Y+1, r1	; 0x01
	if(PinNo<=DIO_PIN7 && PinNo>=DIO_PIN0)
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	08 f0       	brcs	.+2      	; 0x2260 <DIO_u8SetPinDir+0x24>
    225e:	f4 c0       	rjmp	.+488    	; 0x2448 <DIO_u8SetPinDir+0x20c>
	{
		if(Copy_u8Dir==LOW)
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	88 23       	and	r24, r24
    2264:	09 f0       	breq	.+2      	; 0x2268 <DIO_u8SetPinDir+0x2c>
    2266:	77 c0       	rjmp	.+238    	; 0x2356 <DIO_u8SetPinDir+0x11a>
		{
			switch(PortNo)
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	38 87       	std	Y+8, r19	; 0x08
    2270:	2f 83       	std	Y+7, r18	; 0x07
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	91 05       	cpc	r25, r1
    227a:	59 f1       	breq	.+86     	; 0x22d2 <DIO_u8SetPinDir+0x96>
    227c:	2f 81       	ldd	r18, Y+7	; 0x07
    227e:	38 85       	ldd	r19, Y+8	; 0x08
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	2c f4       	brge	.+10     	; 0x2290 <DIO_u8SetPinDir+0x54>
    2286:	8f 81       	ldd	r24, Y+7	; 0x07
    2288:	98 85       	ldd	r25, Y+8	; 0x08
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f0       	breq	.+26     	; 0x22a8 <DIO_u8SetPinDir+0x6c>
    228e:	60 c0       	rjmp	.+192    	; 0x2350 <DIO_u8SetPinDir+0x114>
    2290:	2f 81       	ldd	r18, Y+7	; 0x07
    2292:	38 85       	ldd	r19, Y+8	; 0x08
    2294:	22 30       	cpi	r18, 0x02	; 2
    2296:	31 05       	cpc	r19, r1
    2298:	89 f1       	breq	.+98     	; 0x22fc <DIO_u8SetPinDir+0xc0>
    229a:	8f 81       	ldd	r24, Y+7	; 0x07
    229c:	98 85       	ldd	r25, Y+8	; 0x08
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	91 05       	cpc	r25, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <DIO_u8SetPinDir+0x6a>
    22a4:	40 c0       	rjmp	.+128    	; 0x2326 <DIO_u8SetPinDir+0xea>
    22a6:	54 c0       	rjmp	.+168    	; 0x2350 <DIO_u8SetPinDir+0x114>
			{
				case DIO_PORTA:
					Clr_Bit(DDRA_REG,PinNo);
    22a8:	aa e3       	ldi	r26, 0x3A	; 58
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ea e3       	ldi	r30, 0x3A	; 58
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	48 2f       	mov	r20, r24
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 2e       	mov	r0, r18
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <DIO_u8SetPinDir+0x8a>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	0a 94       	dec	r0
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <DIO_u8SetPinDir+0x86>
    22ca:	80 95       	com	r24
    22cc:	84 23       	and	r24, r20
    22ce:	8c 93       	st	X, r24
    22d0:	bd c0       	rjmp	.+378    	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				case DIO_PORTB:
					Clr_Bit(DDRB_REG,PinNo);
    22d2:	a7 e3       	ldi	r26, 0x37	; 55
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e7 e3       	ldi	r30, 0x37	; 55
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <DIO_u8SetPinDir+0xb4>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <DIO_u8SetPinDir+0xb0>
    22f4:	80 95       	com	r24
    22f6:	84 23       	and	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	a8 c0       	rjmp	.+336    	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				case DIO_PORTC:
					Clr_Bit(DDRC_REG,PinNo);
    22fc:	a4 e3       	ldi	r26, 0x34	; 52
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e4 e3       	ldi	r30, 0x34	; 52
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <DIO_u8SetPinDir+0xde>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <DIO_u8SetPinDir+0xda>
    231e:	80 95       	com	r24
    2320:	84 23       	and	r24, r20
    2322:	8c 93       	st	X, r24
    2324:	93 c0       	rjmp	.+294    	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				case DIO_PORTD:
					Clr_Bit(DDRD_REG,PinNo);
    2326:	a1 e3       	ldi	r26, 0x31	; 49
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e1 e3       	ldi	r30, 0x31	; 49
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	48 2f       	mov	r20, r24
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	02 2e       	mov	r0, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <DIO_u8SetPinDir+0x108>
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	0a 94       	dec	r0
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <DIO_u8SetPinDir+0x104>
    2348:	80 95       	com	r24
    234a:	84 23       	and	r24, r20
    234c:	8c 93       	st	X, r24
    234e:	7e c0       	rjmp	.+252    	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				default:
					Local_u8ErrStatus=RT_NOK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	7b c0       	rjmp	.+246    	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
			}
		}
		else if(Copy_u8Dir==HIGH)
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	09 f0       	breq	.+2      	; 0x235e <DIO_u8SetPinDir+0x122>
    235c:	72 c0       	rjmp	.+228    	; 0x2442 <DIO_u8SetPinDir+0x206>
		{
			switch(PortNo)
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	3e 83       	std	Y+6, r19	; 0x06
    2366:	2d 83       	std	Y+5, r18	; 0x05
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	91 05       	cpc	r25, r1
    2370:	49 f1       	breq	.+82     	; 0x23c4 <DIO_u8SetPinDir+0x188>
    2372:	2d 81       	ldd	r18, Y+5	; 0x05
    2374:	3e 81       	ldd	r19, Y+6	; 0x06
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	2c f4       	brge	.+10     	; 0x2386 <DIO_u8SetPinDir+0x14a>
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	61 f0       	breq	.+24     	; 0x239c <DIO_u8SetPinDir+0x160>
    2384:	5b c0       	rjmp	.+182    	; 0x243c <DIO_u8SetPinDir+0x200>
    2386:	2d 81       	ldd	r18, Y+5	; 0x05
    2388:	3e 81       	ldd	r19, Y+6	; 0x06
    238a:	22 30       	cpi	r18, 0x02	; 2
    238c:	31 05       	cpc	r19, r1
    238e:	71 f1       	breq	.+92     	; 0x23ec <DIO_u8SetPinDir+0x1b0>
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	91 05       	cpc	r25, r1
    2398:	e9 f1       	breq	.+122    	; 0x2414 <DIO_u8SetPinDir+0x1d8>
    239a:	50 c0       	rjmp	.+160    	; 0x243c <DIO_u8SetPinDir+0x200>
			{
				case DIO_PORTA:
					Set_Bit(DDRA_REG,PinNo);
    239c:	aa e3       	ldi	r26, 0x3A	; 58
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ea e3       	ldi	r30, 0x3A	; 58
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_u8SetPinDir+0x17e>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_u8SetPinDir+0x17a>
    23be:	84 2b       	or	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	44 c0       	rjmp	.+136    	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				case DIO_PORTB:
					Set_Bit(DDRB_REG,PinNo);
    23c4:	a7 e3       	ldi	r26, 0x37	; 55
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e7 e3       	ldi	r30, 0x37	; 55
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <DIO_u8SetPinDir+0x1a6>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <DIO_u8SetPinDir+0x1a2>
    23e6:	84 2b       	or	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	30 c0       	rjmp	.+96     	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				case DIO_PORTC:
					Set_Bit(DDRC_REG,PinNo);
    23ec:	a4 e3       	ldi	r26, 0x34	; 52
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e4 e3       	ldi	r30, 0x34	; 52
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	48 2f       	mov	r20, r24
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 2e       	mov	r0, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <DIO_u8SetPinDir+0x1ce>
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <DIO_u8SetPinDir+0x1ca>
    240e:	84 2b       	or	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	1c c0       	rjmp	.+56     	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				case DIO_PORTD:
					Set_Bit(DDRD_REG,PinNo);
    2414:	a1 e3       	ldi	r26, 0x31	; 49
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e1 e3       	ldi	r30, 0x31	; 49
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	48 2f       	mov	r20, r24
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 2e       	mov	r0, r18
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <DIO_u8SetPinDir+0x1f6>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	0a 94       	dec	r0
    2434:	e2 f7       	brpl	.-8      	; 0x242e <DIO_u8SetPinDir+0x1f2>
    2436:	84 2b       	or	r24, r20
    2438:	8c 93       	st	X, r24
    243a:	08 c0       	rjmp	.+16     	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
				default:
					Local_u8ErrStatus=RT_NOK;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	05 c0       	rjmp	.+10     	; 0x244c <DIO_u8SetPinDir+0x210>
					break;
			}
		}
		else
		{
			Local_u8ErrStatus=RT_NOK;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	02 c0       	rjmp	.+4      	; 0x244c <DIO_u8SetPinDir+0x210>
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrStatus;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
}
    244e:	28 96       	adiw	r28, 0x08	; 8
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <DIO_u8SetPinVal>:
u8 DIO_u8SetPinVal(DIO_PORT PortNo,DIO_PIN PinNo,u8 Copy_u8Val)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	28 97       	sbiw	r28, 0x08	; 8
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	6b 83       	std	Y+3, r22	; 0x03
    2478:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus=RT_OK;
    247a:	19 82       	std	Y+1, r1	; 0x01
	if(PinNo<=DIO_PIN7 && PinNo>=DIO_PIN0)
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	88 30       	cpi	r24, 0x08	; 8
    2480:	08 f0       	brcs	.+2      	; 0x2484 <DIO_u8SetPinVal+0x24>
    2482:	f4 c0       	rjmp	.+488    	; 0x266c <DIO_u8SetPinVal+0x20c>
	{
		if(Copy_u8Val==LOW)
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
    2486:	88 23       	and	r24, r24
    2488:	09 f0       	breq	.+2      	; 0x248c <DIO_u8SetPinVal+0x2c>
    248a:	77 c0       	rjmp	.+238    	; 0x257a <DIO_u8SetPinVal+0x11a>
		{
			switch(PortNo)
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	38 87       	std	Y+8, r19	; 0x08
    2494:	2f 83       	std	Y+7, r18	; 0x07
    2496:	8f 81       	ldd	r24, Y+7	; 0x07
    2498:	98 85       	ldd	r25, Y+8	; 0x08
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	59 f1       	breq	.+86     	; 0x24f6 <DIO_u8SetPinVal+0x96>
    24a0:	2f 81       	ldd	r18, Y+7	; 0x07
    24a2:	38 85       	ldd	r19, Y+8	; 0x08
    24a4:	22 30       	cpi	r18, 0x02	; 2
    24a6:	31 05       	cpc	r19, r1
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <DIO_u8SetPinVal+0x54>
    24aa:	8f 81       	ldd	r24, Y+7	; 0x07
    24ac:	98 85       	ldd	r25, Y+8	; 0x08
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f0       	breq	.+26     	; 0x24cc <DIO_u8SetPinVal+0x6c>
    24b2:	60 c0       	rjmp	.+192    	; 0x2574 <DIO_u8SetPinVal+0x114>
    24b4:	2f 81       	ldd	r18, Y+7	; 0x07
    24b6:	38 85       	ldd	r19, Y+8	; 0x08
    24b8:	22 30       	cpi	r18, 0x02	; 2
    24ba:	31 05       	cpc	r19, r1
    24bc:	89 f1       	breq	.+98     	; 0x2520 <DIO_u8SetPinVal+0xc0>
    24be:	8f 81       	ldd	r24, Y+7	; 0x07
    24c0:	98 85       	ldd	r25, Y+8	; 0x08
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	91 05       	cpc	r25, r1
    24c6:	09 f4       	brne	.+2      	; 0x24ca <DIO_u8SetPinVal+0x6a>
    24c8:	40 c0       	rjmp	.+128    	; 0x254a <DIO_u8SetPinVal+0xea>
    24ca:	54 c0       	rjmp	.+168    	; 0x2574 <DIO_u8SetPinVal+0x114>
			{
				case DIO_PORTA:
					Clr_Bit(PORTA_REG,PinNo);
    24cc:	ab e3       	ldi	r26, 0x3B	; 59
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	eb e3       	ldi	r30, 0x3B	; 59
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	48 2f       	mov	r20, r24
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	02 2e       	mov	r0, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <DIO_u8SetPinVal+0x8a>
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	0a 94       	dec	r0
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <DIO_u8SetPinVal+0x86>
    24ee:	80 95       	com	r24
    24f0:	84 23       	and	r24, r20
    24f2:	8c 93       	st	X, r24
    24f4:	bd c0       	rjmp	.+378    	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				case DIO_PORTB:
					Clr_Bit(PORTB_REG,PinNo);
    24f6:	a8 e3       	ldi	r26, 0x38	; 56
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e8 e3       	ldi	r30, 0x38	; 56
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	48 2f       	mov	r20, r24
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	02 2e       	mov	r0, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <DIO_u8SetPinVal+0xb4>
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	0a 94       	dec	r0
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <DIO_u8SetPinVal+0xb0>
    2518:	80 95       	com	r24
    251a:	84 23       	and	r24, r20
    251c:	8c 93       	st	X, r24
    251e:	a8 c0       	rjmp	.+336    	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				case DIO_PORTC:
					Clr_Bit(PORTC_REG,PinNo);
    2520:	a5 e3       	ldi	r26, 0x35	; 53
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e5 e3       	ldi	r30, 0x35	; 53
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	48 2f       	mov	r20, r24
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	02 2e       	mov	r0, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <DIO_u8SetPinVal+0xde>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	0a 94       	dec	r0
    2540:	e2 f7       	brpl	.-8      	; 0x253a <DIO_u8SetPinVal+0xda>
    2542:	80 95       	com	r24
    2544:	84 23       	and	r24, r20
    2546:	8c 93       	st	X, r24
    2548:	93 c0       	rjmp	.+294    	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				case DIO_PORTD:
					Clr_Bit(PORTD_REG,PinNo);
    254a:	a2 e3       	ldi	r26, 0x32	; 50
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e2 e3       	ldi	r30, 0x32	; 50
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <DIO_u8SetPinVal+0x108>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <DIO_u8SetPinVal+0x104>
    256c:	80 95       	com	r24
    256e:	84 23       	and	r24, r20
    2570:	8c 93       	st	X, r24
    2572:	7e c0       	rjmp	.+252    	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				default:
					Local_u8ErrStatus=RT_NOK;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	7b c0       	rjmp	.+246    	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
			}
		}
		else if(Copy_u8Val==HIGH)
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	09 f0       	breq	.+2      	; 0x2582 <DIO_u8SetPinVal+0x122>
    2580:	72 c0       	rjmp	.+228    	; 0x2666 <DIO_u8SetPinVal+0x206>
		{
			switch(PortNo)
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	3e 83       	std	Y+6, r19	; 0x06
    258a:	2d 83       	std	Y+5, r18	; 0x05
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	81 30       	cpi	r24, 0x01	; 1
    2592:	91 05       	cpc	r25, r1
    2594:	49 f1       	breq	.+82     	; 0x25e8 <DIO_u8SetPinVal+0x188>
    2596:	2d 81       	ldd	r18, Y+5	; 0x05
    2598:	3e 81       	ldd	r19, Y+6	; 0x06
    259a:	22 30       	cpi	r18, 0x02	; 2
    259c:	31 05       	cpc	r19, r1
    259e:	2c f4       	brge	.+10     	; 0x25aa <DIO_u8SetPinVal+0x14a>
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	61 f0       	breq	.+24     	; 0x25c0 <DIO_u8SetPinVal+0x160>
    25a8:	5b c0       	rjmp	.+182    	; 0x2660 <DIO_u8SetPinVal+0x200>
    25aa:	2d 81       	ldd	r18, Y+5	; 0x05
    25ac:	3e 81       	ldd	r19, Y+6	; 0x06
    25ae:	22 30       	cpi	r18, 0x02	; 2
    25b0:	31 05       	cpc	r19, r1
    25b2:	71 f1       	breq	.+92     	; 0x2610 <DIO_u8SetPinVal+0x1b0>
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	91 05       	cpc	r25, r1
    25bc:	e9 f1       	breq	.+122    	; 0x2638 <DIO_u8SetPinVal+0x1d8>
    25be:	50 c0       	rjmp	.+160    	; 0x2660 <DIO_u8SetPinVal+0x200>
			{
				case DIO_PORTA:
					Set_Bit(PORTA_REG,PinNo);
    25c0:	ab e3       	ldi	r26, 0x3B	; 59
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	eb e3       	ldi	r30, 0x3B	; 59
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	02 2e       	mov	r0, r18
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <DIO_u8SetPinVal+0x17e>
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	0a 94       	dec	r0
    25e0:	e2 f7       	brpl	.-8      	; 0x25da <DIO_u8SetPinVal+0x17a>
    25e2:	84 2b       	or	r24, r20
    25e4:	8c 93       	st	X, r24
    25e6:	44 c0       	rjmp	.+136    	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				case DIO_PORTB:
					Set_Bit(PORTB_REG,PinNo);
    25e8:	a8 e3       	ldi	r26, 0x38	; 56
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e8 e3       	ldi	r30, 0x38	; 56
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	48 2f       	mov	r20, r24
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	02 2e       	mov	r0, r18
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <DIO_u8SetPinVal+0x1a6>
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	0a 94       	dec	r0
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <DIO_u8SetPinVal+0x1a2>
    260a:	84 2b       	or	r24, r20
    260c:	8c 93       	st	X, r24
    260e:	30 c0       	rjmp	.+96     	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				case DIO_PORTC:
					Set_Bit(PORTC_REG,PinNo);
    2610:	a5 e3       	ldi	r26, 0x35	; 53
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e5 e3       	ldi	r30, 0x35	; 53
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	48 2f       	mov	r20, r24
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	02 2e       	mov	r0, r18
    2628:	02 c0       	rjmp	.+4      	; 0x262e <DIO_u8SetPinVal+0x1ce>
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	0a 94       	dec	r0
    2630:	e2 f7       	brpl	.-8      	; 0x262a <DIO_u8SetPinVal+0x1ca>
    2632:	84 2b       	or	r24, r20
    2634:	8c 93       	st	X, r24
    2636:	1c c0       	rjmp	.+56     	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				case DIO_PORTD:
					Set_Bit(PORTD_REG,PinNo);
    2638:	a2 e3       	ldi	r26, 0x32	; 50
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e2 e3       	ldi	r30, 0x32	; 50
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	48 2f       	mov	r20, r24
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	02 2e       	mov	r0, r18
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <DIO_u8SetPinVal+0x1f6>
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	0a 94       	dec	r0
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <DIO_u8SetPinVal+0x1f2>
    265a:	84 2b       	or	r24, r20
    265c:	8c 93       	st	X, r24
    265e:	08 c0       	rjmp	.+16     	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
				default:
					Local_u8ErrStatus=RT_NOK;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <DIO_u8SetPinVal+0x210>
					break;
			}
		}
		else
		{
			Local_u8ErrStatus=RT_NOK;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <DIO_u8SetPinVal+0x210>
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrStatus;
    2670:	89 81       	ldd	r24, Y+1	; 0x01
}
    2672:	28 96       	adiw	r28, 0x08	; 8
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(DIO_PORT PortNo,DIO_PIN PinNo,u8* Copy_u8PVal)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	27 97       	sbiw	r28, 0x07	; 7
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	8a 83       	std	Y+2, r24	; 0x02
    269a:	6b 83       	std	Y+3, r22	; 0x03
    269c:	5d 83       	std	Y+5, r21	; 0x05
    269e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrStatus=RT_OK;
    26a0:	19 82       	std	Y+1, r1	; 0x01
	if(PinNo<=DIO_PIN7 && PinNo>=DIO_PIN0)
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	88 30       	cpi	r24, 0x08	; 8
    26a6:	08 f0       	brcs	.+2      	; 0x26aa <DIO_u8GetPinVal+0x26>
    26a8:	74 c0       	rjmp	.+232    	; 0x2792 <DIO_u8GetPinVal+0x10e>
	{
		switch(PortNo)
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	3f 83       	std	Y+7, r19	; 0x07
    26b2:	2e 83       	std	Y+6, r18	; 0x06
    26b4:	4e 81       	ldd	r20, Y+6	; 0x06
    26b6:	5f 81       	ldd	r21, Y+7	; 0x07
    26b8:	41 30       	cpi	r20, 0x01	; 1
    26ba:	51 05       	cpc	r21, r1
    26bc:	59 f1       	breq	.+86     	; 0x2714 <DIO_u8GetPinVal+0x90>
    26be:	8e 81       	ldd	r24, Y+6	; 0x06
    26c0:	9f 81       	ldd	r25, Y+7	; 0x07
    26c2:	82 30       	cpi	r24, 0x02	; 2
    26c4:	91 05       	cpc	r25, r1
    26c6:	34 f4       	brge	.+12     	; 0x26d4 <DIO_u8GetPinVal+0x50>
    26c8:	2e 81       	ldd	r18, Y+6	; 0x06
    26ca:	3f 81       	ldd	r19, Y+7	; 0x07
    26cc:	21 15       	cp	r18, r1
    26ce:	31 05       	cpc	r19, r1
    26d0:	69 f0       	breq	.+26     	; 0x26ec <DIO_u8GetPinVal+0x68>
    26d2:	5c c0       	rjmp	.+184    	; 0x278c <DIO_u8GetPinVal+0x108>
    26d4:	4e 81       	ldd	r20, Y+6	; 0x06
    26d6:	5f 81       	ldd	r21, Y+7	; 0x07
    26d8:	42 30       	cpi	r20, 0x02	; 2
    26da:	51 05       	cpc	r21, r1
    26dc:	79 f1       	breq	.+94     	; 0x273c <DIO_u8GetPinVal+0xb8>
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	91 05       	cpc	r25, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <DIO_u8GetPinVal+0x66>
    26e8:	3d c0       	rjmp	.+122    	; 0x2764 <DIO_u8GetPinVal+0xe0>
    26ea:	50 c0       	rjmp	.+160    	; 0x278c <DIO_u8GetPinVal+0x108>
		{
			case DIO_PORTA:
				*Copy_u8PVal=Get_Bit(PINA_REG,PinNo);
    26ec:	e9 e3       	ldi	r30, 0x39	; 57
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a9 01       	movw	r20, r18
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <DIO_u8GetPinVal+0x80>
    2700:	55 95       	asr	r21
    2702:	47 95       	ror	r20
    2704:	8a 95       	dec	r24
    2706:	e2 f7       	brpl	.-8      	; 0x2700 <DIO_u8GetPinVal+0x7c>
    2708:	ca 01       	movw	r24, r20
    270a:	81 70       	andi	r24, 0x01	; 1
    270c:	ec 81       	ldd	r30, Y+4	; 0x04
    270e:	fd 81       	ldd	r31, Y+5	; 0x05
    2710:	80 83       	st	Z, r24
    2712:	41 c0       	rjmp	.+130    	; 0x2796 <DIO_u8GetPinVal+0x112>
				break;
			case DIO_PORTB:
				*Copy_u8PVal=Get_Bit(PINB_REG,PinNo);
    2714:	e6 e3       	ldi	r30, 0x36	; 54
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	88 2f       	mov	r24, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	a9 01       	movw	r20, r18
    2726:	02 c0       	rjmp	.+4      	; 0x272c <DIO_u8GetPinVal+0xa8>
    2728:	55 95       	asr	r21
    272a:	47 95       	ror	r20
    272c:	8a 95       	dec	r24
    272e:	e2 f7       	brpl	.-8      	; 0x2728 <DIO_u8GetPinVal+0xa4>
    2730:	ca 01       	movw	r24, r20
    2732:	81 70       	andi	r24, 0x01	; 1
    2734:	ec 81       	ldd	r30, Y+4	; 0x04
    2736:	fd 81       	ldd	r31, Y+5	; 0x05
    2738:	80 83       	st	Z, r24
    273a:	2d c0       	rjmp	.+90     	; 0x2796 <DIO_u8GetPinVal+0x112>
				break;
			case DIO_PORTC:
				*Copy_u8PVal=Get_Bit(PINC_REG,PinNo);
    273c:	e3 e3       	ldi	r30, 0x33	; 51
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a9 01       	movw	r20, r18
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <DIO_u8GetPinVal+0xd0>
    2750:	55 95       	asr	r21
    2752:	47 95       	ror	r20
    2754:	8a 95       	dec	r24
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <DIO_u8GetPinVal+0xcc>
    2758:	ca 01       	movw	r24, r20
    275a:	81 70       	andi	r24, 0x01	; 1
    275c:	ec 81       	ldd	r30, Y+4	; 0x04
    275e:	fd 81       	ldd	r31, Y+5	; 0x05
    2760:	80 83       	st	Z, r24
    2762:	19 c0       	rjmp	.+50     	; 0x2796 <DIO_u8GetPinVal+0x112>
				break;
			case DIO_PORTD:
				*Copy_u8PVal=Get_Bit(PIND_REG,PinNo);
    2764:	e0 e3       	ldi	r30, 0x30	; 48
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a9 01       	movw	r20, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <DIO_u8GetPinVal+0xf8>
    2778:	55 95       	asr	r21
    277a:	47 95       	ror	r20
    277c:	8a 95       	dec	r24
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <DIO_u8GetPinVal+0xf4>
    2780:	ca 01       	movw	r24, r20
    2782:	81 70       	andi	r24, 0x01	; 1
    2784:	ec 81       	ldd	r30, Y+4	; 0x04
    2786:	fd 81       	ldd	r31, Y+5	; 0x05
    2788:	80 83       	st	Z, r24
    278a:	05 c0       	rjmp	.+10     	; 0x2796 <DIO_u8GetPinVal+0x112>
				break;
			default:
				Local_u8ErrStatus=RT_NOK;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <DIO_u8GetPinVal+0x112>
				break;
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrStatus;
    2796:	89 81       	ldd	r24, Y+1	; 0x01
}
    2798:	27 96       	adiw	r28, 0x07	; 7
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <SERVO_u8InitChA>:
#include "SERVO_INT.h"
#include "SERVO_CONFIG.h"

#include "util/delay.h"
u8 SERVO_u8InitChA(void)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	0f 92       	push	r0
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(DIO_PORTD, DIO_PIN5, OUTPUT);
    27b4:	83 e0       	ldi	r24, 0x03	; 3
    27b6:	65 e0       	ldi	r22, 0x05	; 5
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_u8SetPinDir>
	TIMER1_u8Init(TIMER1_MODE_e_FAST_PWM_ICR1);
    27be:	8e e0       	ldi	r24, 0x0E	; 14
    27c0:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER1_u8Init>
	TIMER1_vidSetICRValue((u16)20000);
    27c4:	80 e2       	ldi	r24, 0x20	; 32
    27c6:	9e e4       	ldi	r25, 0x4E	; 78
    27c8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <TIMER1_vidSetICRValue>
	TIMER1_u8ClkSelect(TIMER1_CLK_SELECT_e_PRE_8);
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	0e 94 6d 09 	call	0x12da	; 0x12da <TIMER1_u8ClkSelect>
	TIMER1_vidSetFastPwmMode(2, TIMER1_CHANNEL_e_CHANNEL_A);
    27d2:	82 e0       	ldi	r24, 0x02	; 2
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	0e 94 45 0b 	call	0x168a	; 0x168a <TIMER1_vidSetFastPwmMode>
}
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <SERVO_u8InitChB>:
u8 SERVO_u8InitChB(void)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(DIO_PORTD, DIO_PIN4, OUTPUT);
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	64 e0       	ldi	r22, 0x04	; 4
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_u8SetPinDir>
	TIMER1_u8Init(TIMER1_MODE_e_FAST_PWM_ICR1);
    27f6:	8e e0       	ldi	r24, 0x0E	; 14
    27f8:	0e 94 47 07 	call	0xe8e	; 0xe8e <TIMER1_u8Init>
	TIMER1_vidSetICRValue((u16)20000);
    27fc:	80 e2       	ldi	r24, 0x20	; 32
    27fe:	9e e4       	ldi	r25, 0x4E	; 78
    2800:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <TIMER1_vidSetICRValue>
	TIMER1_u8ClkSelect(TIMER1_CLK_SELECT_e_PRE_8);
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	0e 94 6d 09 	call	0x12da	; 0x12da <TIMER1_u8ClkSelect>
	TIMER1_vidSetFastPwmMode(2, TIMER1_CHANNEL_e_CHANNEL_B);
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	0e 94 45 0b 	call	0x168a	; 0x168a <TIMER1_vidSetFastPwmMode>
}
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <SERVO_u8SetAngleChA>:

u8 SERVO_u8SetAngleChA (f32 Copy_u8Angle)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	2a 97       	sbiw	r28, 0x0a	; 10
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	6e 83       	std	Y+6, r22	; 0x06
    2830:	7f 83       	std	Y+7, r23	; 0x07
    2832:	88 87       	std	Y+8, r24	; 0x08
    2834:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8ErrStatus=RT_OK;
    2836:	1d 82       	std	Y+5, r1	; 0x05
	u16 TempOCR1A=0;
    2838:	1c 82       	std	Y+4, r1	; 0x04
    283a:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
    283c:	6e 81       	ldd	r22, Y+6	; 0x06
    283e:	7f 81       	ldd	r23, Y+7	; 0x07
    2840:	88 85       	ldd	r24, Y+8	; 0x08
    2842:	99 85       	ldd	r25, Y+9	; 0x09
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	44 e3       	ldi	r20, 0x34	; 52
    284a:	53 e4       	ldi	r21, 0x43	; 67
    284c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2850:	18 16       	cp	r1, r24
    2852:	cc f1       	brlt	.+114    	; 0x28c6 <SERVO_u8SetAngleChA+0xac>
    2854:	6e 81       	ldd	r22, Y+6	; 0x06
    2856:	7f 81       	ldd	r23, Y+7	; 0x07
    2858:	88 85       	ldd	r24, Y+8	; 0x08
    285a:	99 85       	ldd	r25, Y+9	; 0x09
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2868:	88 23       	and	r24, r24
    286a:	6c f1       	brlt	.+90     	; 0x28c6 <SERVO_u8SetAngleChA+0xac>
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
    286c:	88 ee       	ldi	r24, 0xE8	; 232
    286e:	93 e0       	ldi	r25, 0x03	; 3
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
		TempOCR1A=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	cc 01       	movw	r24, r24
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	2e 81       	ldd	r18, Y+6	; 0x06
    2890:	3f 81       	ldd	r19, Y+7	; 0x07
    2892:	48 85       	ldd	r20, Y+8	; 0x08
    2894:	59 85       	ldd	r21, Y+9	; 0x09
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	44 e3       	ldi	r20, 0x34	; 52
    28a8:	53 e4       	ldi	r21, 0x43	; 67
    28aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	88 51       	subi	r24, 0x18	; 24
    28c0:	9c 4f       	sbci	r25, 0xFC	; 252
    28c2:	9c 83       	std	Y+4, r25	; 0x04
    28c4:	8b 83       	std	Y+3, r24	; 0x03
	}
	OCR1A_REG=TempOCR1A;
    28c6:	ea e4       	ldi	r30, 0x4A	; 74
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
}
    28d2:	2a 96       	adiw	r28, 0x0a	; 10
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <SERVO_u8SetAngleChB>:

u8 SERVO_u8SetAngleChB (f32 Copy_u8Angle)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	2b 97       	sbiw	r28, 0x0b	; 11
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	6e 83       	std	Y+6, r22	; 0x06
    28fa:	7f 83       	std	Y+7, r23	; 0x07
    28fc:	88 87       	std	Y+8, r24	; 0x08
    28fe:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8ErrStatus=RT_OK;
    2900:	1d 82       	std	Y+5, r1	; 0x05
	u16 TempOCR1B=0;
    2902:	1c 82       	std	Y+4, r1	; 0x04
    2904:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
    2906:	1b 86       	std	Y+11, r1	; 0x0b
    2908:	6e 81       	ldd	r22, Y+6	; 0x06
    290a:	7f 81       	ldd	r23, Y+7	; 0x07
    290c:	88 85       	ldd	r24, Y+8	; 0x08
    290e:	99 85       	ldd	r25, Y+9	; 0x09
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	44 e3       	ldi	r20, 0x34	; 52
    2916:	53 e4       	ldi	r21, 0x43	; 67
    2918:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    291c:	18 16       	cp	r1, r24
    291e:	14 f0       	brlt	.+4      	; 0x2924 <SERVO_u8SetAngleChB+0x40>
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	8b 87       	std	Y+11, r24	; 0x0b
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	9b 85       	ldd	r25, Y+11	; 0x0b
    2928:	89 27       	eor	r24, r25
    292a:	88 23       	and	r24, r24
    292c:	09 f0       	breq	.+2      	; 0x2930 <SERVO_u8SetAngleChB+0x4c>
    292e:	48 c0       	rjmp	.+144    	; 0x29c0 <SERVO_u8SetAngleChB+0xdc>
    2930:	1a 86       	std	Y+10, r1	; 0x0a
    2932:	6e 81       	ldd	r22, Y+6	; 0x06
    2934:	7f 81       	ldd	r23, Y+7	; 0x07
    2936:	88 85       	ldd	r24, Y+8	; 0x08
    2938:	99 85       	ldd	r25, Y+9	; 0x09
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2946:	88 23       	and	r24, r24
    2948:	14 f0       	brlt	.+4      	; 0x294e <SERVO_u8SetAngleChB+0x6a>
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	8a 87       	std	Y+10, r24	; 0x0a
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	89 27       	eor	r24, r25
    2954:	88 23       	and	r24, r24
    2956:	a1 f5       	brne	.+104    	; 0x29c0 <SERVO_u8SetAngleChB+0xdc>
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
    2958:	88 ee       	ldi	r24, 0xE8	; 232
    295a:	93 e0       	ldi	r25, 0x03	; 3
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
		TempOCR1B=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	cc 01       	movw	r24, r24
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	2e 81       	ldd	r18, Y+6	; 0x06
    297c:	3f 81       	ldd	r19, Y+7	; 0x07
    297e:	48 85       	ldd	r20, Y+8	; 0x08
    2980:	59 85       	ldd	r21, Y+9	; 0x09
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	44 e3       	ldi	r20, 0x34	; 52
    2994:	53 e4       	ldi	r21, 0x43	; 67
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	88 51       	subi	r24, 0x18	; 24
    29ac:	9c 4f       	sbci	r25, 0xFC	; 252
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
		OCR1B_REG=TempOCR1B;
    29b2:	e8 e4       	ldi	r30, 0x48	; 72
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	80 83       	st	Z, r24
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <SERVO_u8SetAngleChB+0xe0>
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrStatus;
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29c6:	2b 96       	adiw	r28, 0x0b	; 11
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <SERVO_u8SmoothOpenChA>:

u8 SERVO_u8SmoothOpenChA (f32 Copy_u8Angle)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	6b 97       	sbiw	r28, 0x1b	; 27
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	6e 8b       	std	Y+22, r22	; 0x16
    29ee:	7f 8b       	std	Y+23, r23	; 0x17
    29f0:	88 8f       	std	Y+24, r24	; 0x18
    29f2:	99 8f       	std	Y+25, r25	; 0x19
	u8 Local_u8ErrStatus=RT_OK;
    29f4:	1d 8a       	std	Y+21, r1	; 0x15
	u16 TempOCR1A=0;
    29f6:	1c 8a       	std	Y+20, r1	; 0x14
    29f8:	1b 8a       	std	Y+19, r1	; 0x13
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
    29fa:	1b 8e       	std	Y+27, r1	; 0x1b
    29fc:	6e 89       	ldd	r22, Y+22	; 0x16
    29fe:	7f 89       	ldd	r23, Y+23	; 0x17
    2a00:	88 8d       	ldd	r24, Y+24	; 0x18
    2a02:	99 8d       	ldd	r25, Y+25	; 0x19
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	44 e3       	ldi	r20, 0x34	; 52
    2a0a:	53 e4       	ldi	r21, 0x43	; 67
    2a0c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	14 f0       	brlt	.+4      	; 0x2a18 <SERVO_u8SmoothOpenChA+0x40>
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	8b 8f       	std	Y+27, r24	; 0x1b
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a1c:	89 27       	eor	r24, r25
    2a1e:	88 23       	and	r24, r24
    2a20:	09 f0       	breq	.+2      	; 0x2a24 <SERVO_u8SmoothOpenChA+0x4c>
    2a22:	cd c0       	rjmp	.+410    	; 0x2bbe <SERVO_u8SmoothOpenChA+0x1e6>
    2a24:	1a 8e       	std	Y+26, r1	; 0x1a
    2a26:	6e 89       	ldd	r22, Y+22	; 0x16
    2a28:	7f 89       	ldd	r23, Y+23	; 0x17
    2a2a:	88 8d       	ldd	r24, Y+24	; 0x18
    2a2c:	99 8d       	ldd	r25, Y+25	; 0x19
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	14 f0       	brlt	.+4      	; 0x2a42 <SERVO_u8SmoothOpenChA+0x6a>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	8a 8f       	std	Y+26, r24	; 0x1a
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a46:	89 27       	eor	r24, r25
    2a48:	88 23       	and	r24, r24
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <SERVO_u8SmoothOpenChA+0x76>
    2a4c:	b8 c0       	rjmp	.+368    	; 0x2bbe <SERVO_u8SmoothOpenChA+0x1e6>
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
    2a4e:	88 ee       	ldi	r24, 0xE8	; 232
    2a50:	93 e0       	ldi	r25, 0x03	; 3
    2a52:	9a 8b       	std	Y+18, r25	; 0x12
    2a54:	89 8b       	std	Y+17, r24	; 0x11
		TempOCR1A=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
    2a56:	89 89       	ldd	r24, Y+17	; 0x11
    2a58:	9a 89       	ldd	r25, Y+18	; 0x12
    2a5a:	cc 01       	movw	r24, r24
    2a5c:	a0 e0       	ldi	r26, 0x00	; 0
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	cd 01       	movw	r24, r26
    2a70:	2e 89       	ldd	r18, Y+22	; 0x16
    2a72:	3f 89       	ldd	r19, Y+23	; 0x17
    2a74:	48 8d       	ldd	r20, Y+24	; 0x18
    2a76:	59 8d       	ldd	r21, Y+25	; 0x19
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	44 e3       	ldi	r20, 0x34	; 52
    2a8a:	53 e4       	ldi	r21, 0x43	; 67
    2a8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	bc 01       	movw	r22, r24
    2a96:	cd 01       	movw	r24, r26
    2a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	88 51       	subi	r24, 0x18	; 24
    2aa2:	9c 4f       	sbci	r25, 0xFC	; 252
    2aa4:	9c 8b       	std	Y+20, r25	; 0x14
    2aa6:	8b 8b       	std	Y+19, r24	; 0x13
		for(int i=SERVO_LOWER_LIMIT;i<=TempOCR1A;i+=5)
    2aa8:	88 ee       	ldi	r24, 0xE8	; 232
    2aaa:	93 e0       	ldi	r25, 0x03	; 3
    2aac:	98 8b       	std	Y+16, r25	; 0x10
    2aae:	8f 87       	std	Y+15, r24	; 0x0f
    2ab0:	7d c0       	rjmp	.+250    	; 0x2bac <SERVO_u8SmoothOpenChA+0x1d4>
		{
			OCR1A_REG=i;
    2ab2:	ea e4       	ldi	r30, 0x4A	; 74
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	98 89       	ldd	r25, Y+16	; 0x10
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	80 83       	st	Z, r24
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ac4:	b1 e4       	ldi	r27, 0x41	; 65
    2ac6:	8b 87       	std	Y+11, r24	; 0x0b
    2ac8:	9c 87       	std	Y+12, r25	; 0x0c
    2aca:	ad 87       	std	Y+13, r26	; 0x0d
    2acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4a ef       	ldi	r20, 0xFA	; 250
    2adc:	54 e4       	ldi	r21, 0x44	; 68
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8f 83       	std	Y+7, r24	; 0x07
    2ae8:	98 87       	std	Y+8, r25	; 0x08
    2aea:	a9 87       	std	Y+9, r26	; 0x09
    2aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aee:	6f 81       	ldd	r22, Y+7	; 0x07
    2af0:	78 85       	ldd	r23, Y+8	; 0x08
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	2c f4       	brge	.+10     	; 0x2b10 <SERVO_u8SmoothOpenChA+0x138>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	3f c0       	rjmp	.+126    	; 0x2b8e <SERVO_u8SmoothOpenChA+0x1b6>
	else if (__tmp > 65535)
    2b10:	6f 81       	ldd	r22, Y+7	; 0x07
    2b12:	78 85       	ldd	r23, Y+8	; 0x08
    2b14:	89 85       	ldd	r24, Y+9	; 0x09
    2b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	4c f5       	brge	.+82     	; 0x2b7a <SERVO_u8SmoothOpenChA+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	51 e4       	ldi	r21, 0x41	; 65
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	bc 01       	movw	r22, r24
    2b42:	cd 01       	movw	r24, r26
    2b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	0f c0       	rjmp	.+30     	; 0x2b70 <SERVO_u8SmoothOpenChA+0x198>
    2b52:	88 ec       	ldi	r24, 0xC8	; 200
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	9c 83       	std	Y+4, r25	; 0x04
    2b58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <SERVO_u8SmoothOpenChA+0x186>
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	69 f7       	brne	.-38     	; 0x2b52 <SERVO_u8SmoothOpenChA+0x17a>
    2b78:	14 c0       	rjmp	.+40     	; 0x2ba2 <SERVO_u8SmoothOpenChA+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7c:	78 85       	ldd	r23, Y+8	; 0x08
    2b7e:	89 85       	ldd	r24, Y+9	; 0x09
    2b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b90:	9e 81       	ldd	r25, Y+6	; 0x06
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <SERVO_u8SmoothOpenChA+0x1c2>
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
	u16 TempOCR1A=0;
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
		TempOCR1A=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
		for(int i=SERVO_LOWER_LIMIT;i<=TempOCR1A;i+=5)
    2ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba4:	98 89       	ldd	r25, Y+16	; 0x10
    2ba6:	05 96       	adiw	r24, 0x05	; 5
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f
    2bac:	2f 85       	ldd	r18, Y+15	; 0x0f
    2bae:	38 89       	ldd	r19, Y+16	; 0x10
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	82 17       	cp	r24, r18
    2bb6:	93 07       	cpc	r25, r19
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <SERVO_u8SmoothOpenChA+0x1e4>
    2bba:	7b cf       	rjmp	.-266    	; 0x2ab2 <SERVO_u8SmoothOpenChA+0xda>
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <SERVO_u8SmoothOpenChA+0x1ea>
			_delay_ms(20);
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	8d 8b       	std	Y+21, r24	; 0x15
	}
	return Local_u8ErrStatus;
    2bc2:	8d 89       	ldd	r24, Y+21	; 0x15
}
    2bc4:	6b 96       	adiw	r28, 0x1b	; 27
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <SERVO_u8SmoothCloseChA>:

u8 SERVO_u8SmoothCloseChA (f32 Copy_u8Angle)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	6b 97       	sbiw	r28, 0x1b	; 27
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	6e 8b       	std	Y+22, r22	; 0x16
    2bec:	7f 8b       	std	Y+23, r23	; 0x17
    2bee:	88 8f       	std	Y+24, r24	; 0x18
    2bf0:	99 8f       	std	Y+25, r25	; 0x19
	u8 Local_u8ErrStatus=RT_OK;
    2bf2:	1d 8a       	std	Y+21, r1	; 0x15
	u16 TempOCR1A=0;
    2bf4:	1c 8a       	std	Y+20, r1	; 0x14
    2bf6:	1b 8a       	std	Y+19, r1	; 0x13
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
    2bf8:	1b 8e       	std	Y+27, r1	; 0x1b
    2bfa:	6e 89       	ldd	r22, Y+22	; 0x16
    2bfc:	7f 89       	ldd	r23, Y+23	; 0x17
    2bfe:	88 8d       	ldd	r24, Y+24	; 0x18
    2c00:	99 8d       	ldd	r25, Y+25	; 0x19
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	44 e3       	ldi	r20, 0x34	; 52
    2c08:	53 e4       	ldi	r21, 0x43	; 67
    2c0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	14 f0       	brlt	.+4      	; 0x2c16 <SERVO_u8SmoothCloseChA+0x40>
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	8b 8f       	std	Y+27, r24	; 0x1b
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c1a:	89 27       	eor	r24, r25
    2c1c:	88 23       	and	r24, r24
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <SERVO_u8SmoothCloseChA+0x4c>
    2c20:	d3 c0       	rjmp	.+422    	; 0x2dc8 <SERVO_u8SmoothCloseChA+0x1f2>
    2c22:	1a 8e       	std	Y+26, r1	; 0x1a
    2c24:	6e 89       	ldd	r22, Y+22	; 0x16
    2c26:	7f 89       	ldd	r23, Y+23	; 0x17
    2c28:	88 8d       	ldd	r24, Y+24	; 0x18
    2c2a:	99 8d       	ldd	r25, Y+25	; 0x19
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2c38:	88 23       	and	r24, r24
    2c3a:	14 f0       	brlt	.+4      	; 0x2c40 <SERVO_u8SmoothCloseChA+0x6a>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	8a 8f       	std	Y+26, r24	; 0x1a
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c44:	89 27       	eor	r24, r25
    2c46:	88 23       	and	r24, r24
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <SERVO_u8SmoothCloseChA+0x76>
    2c4a:	be c0       	rjmp	.+380    	; 0x2dc8 <SERVO_u8SmoothCloseChA+0x1f2>
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
    2c4c:	88 ee       	ldi	r24, 0xE8	; 232
    2c4e:	93 e0       	ldi	r25, 0x03	; 3
    2c50:	9a 8b       	std	Y+18, r25	; 0x12
    2c52:	89 8b       	std	Y+17, r24	; 0x11
		TempOCR1A=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
    2c54:	89 89       	ldd	r24, Y+17	; 0x11
    2c56:	9a 89       	ldd	r25, Y+18	; 0x12
    2c58:	cc 01       	movw	r24, r24
    2c5a:	a0 e0       	ldi	r26, 0x00	; 0
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	2e 89       	ldd	r18, Y+22	; 0x16
    2c70:	3f 89       	ldd	r19, Y+23	; 0x17
    2c72:	48 8d       	ldd	r20, Y+24	; 0x18
    2c74:	59 8d       	ldd	r21, Y+25	; 0x19
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	44 e3       	ldi	r20, 0x34	; 52
    2c88:	53 e4       	ldi	r21, 0x43	; 67
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	88 51       	subi	r24, 0x18	; 24
    2ca0:	9c 4f       	sbci	r25, 0xFC	; 252
    2ca2:	9c 8b       	std	Y+20, r25	; 0x14
    2ca4:	8b 8b       	std	Y+19, r24	; 0x13
		Temp=OCR1A_REG;
    2ca6:	ea e4       	ldi	r30, 0x4A	; 74
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	91 81       	ldd	r25, Z+1	; 0x01
    2cae:	9a 8b       	std	Y+18, r25	; 0x12
    2cb0:	89 8b       	std	Y+17, r24	; 0x11
		for(int i=Temp;i>=TempOCR1A;i-=5)
    2cb2:	89 89       	ldd	r24, Y+17	; 0x11
    2cb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb6:	98 8b       	std	Y+16, r25	; 0x10
    2cb8:	8f 87       	std	Y+15, r24	; 0x0f
    2cba:	7d c0       	rjmp	.+250    	; 0x2db6 <SERVO_u8SmoothCloseChA+0x1e0>
		{
			OCR1A_REG=i;
    2cbc:	ea e4       	ldi	r30, 0x4A	; 74
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc2:	98 89       	ldd	r25, Y+16	; 0x10
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a0 ea       	ldi	r26, 0xA0	; 160
    2cce:	b1 e4       	ldi	r27, 0x41	; 65
    2cd0:	8b 87       	std	Y+11, r24	; 0x0b
    2cd2:	9c 87       	std	Y+12, r25	; 0x0c
    2cd4:	ad 87       	std	Y+13, r26	; 0x0d
    2cd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a ef       	ldi	r20, 0xFA	; 250
    2ce6:	54 e4       	ldi	r21, 0x44	; 68
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	8f 83       	std	Y+7, r24	; 0x07
    2cf2:	98 87       	std	Y+8, r25	; 0x08
    2cf4:	a9 87       	std	Y+9, r26	; 0x09
    2cf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfa:	78 85       	ldd	r23, Y+8	; 0x08
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e8       	ldi	r20, 0x80	; 128
    2d06:	5f e3       	ldi	r21, 0x3F	; 63
    2d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0c:	88 23       	and	r24, r24
    2d0e:	2c f4       	brge	.+10     	; 0x2d1a <SERVO_u8SmoothCloseChA+0x144>
		__ticks = 1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
    2d18:	3f c0       	rjmp	.+126    	; 0x2d98 <SERVO_u8SmoothCloseChA+0x1c2>
	else if (__tmp > 65535)
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	3f ef       	ldi	r19, 0xFF	; 255
    2d26:	4f e7       	ldi	r20, 0x7F	; 127
    2d28:	57 e4       	ldi	r21, 0x47	; 71
    2d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2e:	18 16       	cp	r1, r24
    2d30:	4c f5       	brge	.+82     	; 0x2d84 <SERVO_u8SmoothCloseChA+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e2       	ldi	r20, 0x20	; 32
    2d40:	51 e4       	ldi	r21, 0x41	; 65
    2d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
    2d5a:	0f c0       	rjmp	.+30     	; 0x2d7a <SERVO_u8SmoothCloseChA+0x1a4>
    2d5c:	88 ec       	ldi	r24, 0xC8	; 200
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9c 83       	std	Y+4, r25	; 0x04
    2d62:	8b 83       	std	Y+3, r24	; 0x03
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	9c 81       	ldd	r25, Y+4	; 0x04
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <SERVO_u8SmoothCloseChA+0x192>
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d70:	8d 81       	ldd	r24, Y+5	; 0x05
    2d72:	9e 81       	ldd	r25, Y+6	; 0x06
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	69 f7       	brne	.-38     	; 0x2d5c <SERVO_u8SmoothCloseChA+0x186>
    2d82:	14 c0       	rjmp	.+40     	; 0x2dac <SERVO_u8SmoothCloseChA+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d84:	6f 81       	ldd	r22, Y+7	; 0x07
    2d86:	78 85       	ldd	r23, Y+8	; 0x08
    2d88:	89 85       	ldd	r24, Y+9	; 0x09
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9c:	9a 83       	std	Y+2, r25	; 0x02
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <SERVO_u8SmoothCloseChA+0x1ce>
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
		TempOCR1A=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
		Temp=OCR1A_REG;
		for(int i=Temp;i>=TempOCR1A;i-=5)
    2dac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dae:	98 89       	ldd	r25, Y+16	; 0x10
    2db0:	05 97       	sbiw	r24, 0x05	; 5
    2db2:	98 8b       	std	Y+16, r25	; 0x10
    2db4:	8f 87       	std	Y+15, r24	; 0x0f
    2db6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2db8:	38 89       	ldd	r19, Y+16	; 0x10
    2dba:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dbe:	28 17       	cp	r18, r24
    2dc0:	39 07       	cpc	r19, r25
    2dc2:	08 f0       	brcs	.+2      	; 0x2dc6 <SERVO_u8SmoothCloseChA+0x1f0>
    2dc4:	7b cf       	rjmp	.-266    	; 0x2cbc <SERVO_u8SmoothCloseChA+0xe6>
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <SERVO_u8SmoothCloseChA+0x1f6>
			_delay_ms(20);
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	8d 8b       	std	Y+21, r24	; 0x15
	}
	return Local_u8ErrStatus;
    2dcc:	8d 89       	ldd	r24, Y+21	; 0x15
}
    2dce:	6b 96       	adiw	r28, 0x1b	; 27
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <SERVO_u8SmoothOpenChB>:

u8 SERVO_u8SmoothOpenChB (f32 Copy_u8Angle)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	6b 97       	sbiw	r28, 0x1b	; 27
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	6e 8b       	std	Y+22, r22	; 0x16
    2df6:	7f 8b       	std	Y+23, r23	; 0x17
    2df8:	88 8f       	std	Y+24, r24	; 0x18
    2dfa:	99 8f       	std	Y+25, r25	; 0x19
	u8 Local_u8ErrStatus=RT_OK;
    2dfc:	1d 8a       	std	Y+21, r1	; 0x15
	u16 TempOCR1B=0;
    2dfe:	1c 8a       	std	Y+20, r1	; 0x14
    2e00:	1b 8a       	std	Y+19, r1	; 0x13
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
    2e02:	1b 8e       	std	Y+27, r1	; 0x1b
    2e04:	6e 89       	ldd	r22, Y+22	; 0x16
    2e06:	7f 89       	ldd	r23, Y+23	; 0x17
    2e08:	88 8d       	ldd	r24, Y+24	; 0x18
    2e0a:	99 8d       	ldd	r25, Y+25	; 0x19
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	44 e3       	ldi	r20, 0x34	; 52
    2e12:	53 e4       	ldi	r21, 0x43	; 67
    2e14:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2e18:	18 16       	cp	r1, r24
    2e1a:	14 f0       	brlt	.+4      	; 0x2e20 <SERVO_u8SmoothOpenChB+0x40>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	8b 8f       	std	Y+27, r24	; 0x1b
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e24:	89 27       	eor	r24, r25
    2e26:	88 23       	and	r24, r24
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <SERVO_u8SmoothOpenChB+0x4c>
    2e2a:	cd c0       	rjmp	.+410    	; 0x2fc6 <SERVO_u8SmoothOpenChB+0x1e6>
    2e2c:	1a 8e       	std	Y+26, r1	; 0x1a
    2e2e:	6e 89       	ldd	r22, Y+22	; 0x16
    2e30:	7f 89       	ldd	r23, Y+23	; 0x17
    2e32:	88 8d       	ldd	r24, Y+24	; 0x18
    2e34:	99 8d       	ldd	r25, Y+25	; 0x19
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2e42:	88 23       	and	r24, r24
    2e44:	14 f0       	brlt	.+4      	; 0x2e4a <SERVO_u8SmoothOpenChB+0x6a>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	8a 8f       	std	Y+26, r24	; 0x1a
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e4e:	89 27       	eor	r24, r25
    2e50:	88 23       	and	r24, r24
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <SERVO_u8SmoothOpenChB+0x76>
    2e54:	b8 c0       	rjmp	.+368    	; 0x2fc6 <SERVO_u8SmoothOpenChB+0x1e6>
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
    2e56:	88 ee       	ldi	r24, 0xE8	; 232
    2e58:	93 e0       	ldi	r25, 0x03	; 3
    2e5a:	9a 8b       	std	Y+18, r25	; 0x12
    2e5c:	89 8b       	std	Y+17, r24	; 0x11
		TempOCR1B=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
    2e5e:	89 89       	ldd	r24, Y+17	; 0x11
    2e60:	9a 89       	ldd	r25, Y+18	; 0x12
    2e62:	cc 01       	movw	r24, r24
    2e64:	a0 e0       	ldi	r26, 0x00	; 0
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	2e 89       	ldd	r18, Y+22	; 0x16
    2e7a:	3f 89       	ldd	r19, Y+23	; 0x17
    2e7c:	48 8d       	ldd	r20, Y+24	; 0x18
    2e7e:	59 8d       	ldd	r21, Y+25	; 0x19
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	44 e3       	ldi	r20, 0x34	; 52
    2e92:	53 e4       	ldi	r21, 0x43	; 67
    2e94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	88 51       	subi	r24, 0x18	; 24
    2eaa:	9c 4f       	sbci	r25, 0xFC	; 252
    2eac:	9c 8b       	std	Y+20, r25	; 0x14
    2eae:	8b 8b       	std	Y+19, r24	; 0x13
		for(int i=SERVO_LOWER_LIMIT;i<=TempOCR1B;i+=5)
    2eb0:	88 ee       	ldi	r24, 0xE8	; 232
    2eb2:	93 e0       	ldi	r25, 0x03	; 3
    2eb4:	98 8b       	std	Y+16, r25	; 0x10
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
    2eb8:	7d c0       	rjmp	.+250    	; 0x2fb4 <SERVO_u8SmoothOpenChB+0x1d4>
		{
			OCR1B_REG=i;
    2eba:	e8 e4       	ldi	r30, 0x48	; 72
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec0:	98 89       	ldd	r25, Y+16	; 0x10
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a0 ea       	ldi	r26, 0xA0	; 160
    2ecc:	b1 e4       	ldi	r27, 0x41	; 65
    2ece:	8b 87       	std	Y+11, r24	; 0x0b
    2ed0:	9c 87       	std	Y+12, r25	; 0x0c
    2ed2:	ad 87       	std	Y+13, r26	; 0x0d
    2ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	4a ef       	ldi	r20, 0xFA	; 250
    2ee4:	54 e4       	ldi	r21, 0x44	; 68
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	8f 83       	std	Y+7, r24	; 0x07
    2ef0:	98 87       	std	Y+8, r25	; 0x08
    2ef2:	a9 87       	std	Y+9, r26	; 0x09
    2ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef8:	78 85       	ldd	r23, Y+8	; 0x08
    2efa:	89 85       	ldd	r24, Y+9	; 0x09
    2efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 e8       	ldi	r20, 0x80	; 128
    2f04:	5f e3       	ldi	r21, 0x3F	; 63
    2f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f0a:	88 23       	and	r24, r24
    2f0c:	2c f4       	brge	.+10     	; 0x2f18 <SERVO_u8SmoothOpenChB+0x138>
		__ticks = 1;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	8d 83       	std	Y+5, r24	; 0x05
    2f16:	3f c0       	rjmp	.+126    	; 0x2f96 <SERVO_u8SmoothOpenChB+0x1b6>
	else if (__tmp > 65535)
    2f18:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1a:	78 85       	ldd	r23, Y+8	; 0x08
    2f1c:	89 85       	ldd	r24, Y+9	; 0x09
    2f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	3f ef       	ldi	r19, 0xFF	; 255
    2f24:	4f e7       	ldi	r20, 0x7F	; 127
    2f26:	57 e4       	ldi	r21, 0x47	; 71
    2f28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f2c:	18 16       	cp	r1, r24
    2f2e:	4c f5       	brge	.+82     	; 0x2f82 <SERVO_u8SmoothOpenChB+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e2       	ldi	r20, 0x20	; 32
    2f3e:	51 e4       	ldi	r21, 0x41	; 65
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <SERVO_u8SmoothOpenChB+0x198>
    2f5a:	88 ec       	ldi	r24, 0xC8	; 200
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <SERVO_u8SmoothOpenChB+0x186>
    2f6a:	9c 83       	std	Y+4, r25	; 0x04
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f70:	9e 81       	ldd	r25, Y+6	; 0x06
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	9e 83       	std	Y+6, r25	; 0x06
    2f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	69 f7       	brne	.-38     	; 0x2f5a <SERVO_u8SmoothOpenChB+0x17a>
    2f80:	14 c0       	rjmp	.+40     	; 0x2faa <SERVO_u8SmoothOpenChB+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	f1 f7       	brne	.-4      	; 0x2fa2 <SERVO_u8SmoothOpenChB+0x1c2>
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	u16 TempOCR1B=0;
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
		TempOCR1B=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
		for(int i=SERVO_LOWER_LIMIT;i<=TempOCR1B;i+=5)
    2faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fac:	98 89       	ldd	r25, Y+16	; 0x10
    2fae:	05 96       	adiw	r24, 0x05	; 5
    2fb0:	98 8b       	std	Y+16, r25	; 0x10
    2fb2:	8f 87       	std	Y+15, r24	; 0x0f
    2fb4:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fb6:	38 89       	ldd	r19, Y+16	; 0x10
    2fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fba:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbc:	82 17       	cp	r24, r18
    2fbe:	93 07       	cpc	r25, r19
    2fc0:	08 f0       	brcs	.+2      	; 0x2fc4 <SERVO_u8SmoothOpenChB+0x1e4>
    2fc2:	7b cf       	rjmp	.-266    	; 0x2eba <SERVO_u8SmoothOpenChB+0xda>
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <SERVO_u8SmoothOpenChB+0x1ea>
			_delay_ms(20);
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	8d 8b       	std	Y+21, r24	; 0x15
	}
	return Local_u8ErrStatus;
    2fca:	8d 89       	ldd	r24, Y+21	; 0x15
}
    2fcc:	6b 96       	adiw	r28, 0x1b	; 27
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <SERVO_u8SmoothCloseChB>:

u8 SERVO_u8SmoothCloseChB (f32 Copy_u8Angle)
{
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	6b 97       	sbiw	r28, 0x1b	; 27
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	6e 8b       	std	Y+22, r22	; 0x16
    2ff4:	7f 8b       	std	Y+23, r23	; 0x17
    2ff6:	88 8f       	std	Y+24, r24	; 0x18
    2ff8:	99 8f       	std	Y+25, r25	; 0x19
	u8 Local_u8ErrStatus=RT_OK;
    2ffa:	1d 8a       	std	Y+21, r1	; 0x15
	u16 TempOCR1B=0;
    2ffc:	1c 8a       	std	Y+20, r1	; 0x14
    2ffe:	1b 8a       	std	Y+19, r1	; 0x13
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
    3000:	1b 8e       	std	Y+27, r1	; 0x1b
    3002:	6e 89       	ldd	r22, Y+22	; 0x16
    3004:	7f 89       	ldd	r23, Y+23	; 0x17
    3006:	88 8d       	ldd	r24, Y+24	; 0x18
    3008:	99 8d       	ldd	r25, Y+25	; 0x19
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	44 e3       	ldi	r20, 0x34	; 52
    3010:	53 e4       	ldi	r21, 0x43	; 67
    3012:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3016:	18 16       	cp	r1, r24
    3018:	14 f0       	brlt	.+4      	; 0x301e <SERVO_u8SmoothCloseChB+0x40>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	8b 8f       	std	Y+27, r24	; 0x1b
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3022:	89 27       	eor	r24, r25
    3024:	88 23       	and	r24, r24
    3026:	09 f0       	breq	.+2      	; 0x302a <SERVO_u8SmoothCloseChB+0x4c>
    3028:	d3 c0       	rjmp	.+422    	; 0x31d0 <SERVO_u8SmoothCloseChB+0x1f2>
    302a:	1a 8e       	std	Y+26, r1	; 0x1a
    302c:	6e 89       	ldd	r22, Y+22	; 0x16
    302e:	7f 89       	ldd	r23, Y+23	; 0x17
    3030:	88 8d       	ldd	r24, Y+24	; 0x18
    3032:	99 8d       	ldd	r25, Y+25	; 0x19
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3040:	88 23       	and	r24, r24
    3042:	14 f0       	brlt	.+4      	; 0x3048 <SERVO_u8SmoothCloseChB+0x6a>
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	8a 8f       	std	Y+26, r24	; 0x1a
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    304c:	89 27       	eor	r24, r25
    304e:	88 23       	and	r24, r24
    3050:	09 f0       	breq	.+2      	; 0x3054 <SERVO_u8SmoothCloseChB+0x76>
    3052:	be c0       	rjmp	.+380    	; 0x31d0 <SERVO_u8SmoothCloseChB+0x1f2>
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
    3054:	88 ee       	ldi	r24, 0xE8	; 232
    3056:	93 e0       	ldi	r25, 0x03	; 3
    3058:	9a 8b       	std	Y+18, r25	; 0x12
    305a:	89 8b       	std	Y+17, r24	; 0x11
		TempOCR1B=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	9a 89       	ldd	r25, Y+18	; 0x12
    3060:	cc 01       	movw	r24, r24
    3062:	a0 e0       	ldi	r26, 0x00	; 0
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	2e 89       	ldd	r18, Y+22	; 0x16
    3078:	3f 89       	ldd	r19, Y+23	; 0x17
    307a:	48 8d       	ldd	r20, Y+24	; 0x18
    307c:	59 8d       	ldd	r21, Y+25	; 0x19
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	44 e3       	ldi	r20, 0x34	; 52
    3090:	53 e4       	ldi	r21, 0x43	; 67
    3092:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	88 51       	subi	r24, 0x18	; 24
    30a8:	9c 4f       	sbci	r25, 0xFC	; 252
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	8b 8b       	std	Y+19, r24	; 0x13
		Temp=OCR1B_REG;
    30ae:	e8 e4       	ldi	r30, 0x48	; 72
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	91 81       	ldd	r25, Z+1	; 0x01
    30b6:	9a 8b       	std	Y+18, r25	; 0x12
    30b8:	89 8b       	std	Y+17, r24	; 0x11
		for(int i=Temp;i>=TempOCR1B;i-=5)
    30ba:	89 89       	ldd	r24, Y+17	; 0x11
    30bc:	9a 89       	ldd	r25, Y+18	; 0x12
    30be:	98 8b       	std	Y+16, r25	; 0x10
    30c0:	8f 87       	std	Y+15, r24	; 0x0f
    30c2:	7d c0       	rjmp	.+250    	; 0x31be <SERVO_u8SmoothCloseChB+0x1e0>
		{
			OCR1B_REG=i;
    30c4:	e8 e4       	ldi	r30, 0x48	; 72
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ca:	98 89       	ldd	r25, Y+16	; 0x10
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	80 83       	st	Z, r24
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 ea       	ldi	r26, 0xA0	; 160
    30d6:	b1 e4       	ldi	r27, 0x41	; 65
    30d8:	8b 87       	std	Y+11, r24	; 0x0b
    30da:	9c 87       	std	Y+12, r25	; 0x0c
    30dc:	ad 87       	std	Y+13, r26	; 0x0d
    30de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a ef       	ldi	r20, 0xFA	; 250
    30ee:	54 e4       	ldi	r21, 0x44	; 68
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8f 83       	std	Y+7, r24	; 0x07
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	a9 87       	std	Y+9, r26	; 0x09
    30fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <SERVO_u8SmoothCloseChB+0x144>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <SERVO_u8SmoothCloseChB+0x1c2>
	else if (__tmp > 65535)
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <SERVO_u8SmoothCloseChB+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3140:	9e 85       	ldd	r25, Y+14	; 0x0e
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <SERVO_u8SmoothCloseChB+0x1a4>
    3164:	88 ec       	ldi	r24, 0xC8	; 200
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <SERVO_u8SmoothCloseChB+0x192>
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <SERVO_u8SmoothCloseChB+0x186>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <SERVO_u8SmoothCloseChB+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <SERVO_u8SmoothCloseChB+0x1ce>
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Angle<=ServoMaxAngle && Copy_u8Angle>=ServoMinAngle)
	{
		u16 Temp=SERVO_UPPER_LIMIT-SERVO_LOWER_LIMIT;
		TempOCR1B=SERVO_LOWER_LIMIT+(u16)((Copy_u8Angle*Temp)/180);
		Temp=OCR1B_REG;
		for(int i=Temp;i>=TempOCR1B;i-=5)
    31b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b6:	98 89       	ldd	r25, Y+16	; 0x10
    31b8:	05 97       	sbiw	r24, 0x05	; 5
    31ba:	98 8b       	std	Y+16, r25	; 0x10
    31bc:	8f 87       	std	Y+15, r24	; 0x0f
    31be:	2f 85       	ldd	r18, Y+15	; 0x0f
    31c0:	38 89       	ldd	r19, Y+16	; 0x10
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	28 17       	cp	r18, r24
    31c8:	39 07       	cpc	r19, r25
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <SERVO_u8SmoothCloseChB+0x1f0>
    31cc:	7b cf       	rjmp	.-266    	; 0x30c4 <SERVO_u8SmoothCloseChB+0xe6>
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <SERVO_u8SmoothCloseChB+0x1f6>
			_delay_ms(20);
		}
	}
	else
	{
		Local_u8ErrStatus=RT_NOK;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	8d 8b       	std	Y+21, r24	; 0x15
	}
	return Local_u8ErrStatus;
    31d4:	8d 89       	ldd	r24, Y+21	; 0x15
}
    31d6:	6b 96       	adiw	r28, 0x1b	; 27
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <main>:

void main (void)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <main+0x6>
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
	SERVO_u8InitChA();
    31f2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <SERVO_u8InitChA>
	u16 angle_ticks;
	while(1)
	{
		SERVO_u8SmoothOpenChA(130.0);
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	93 e4       	ldi	r25, 0x43	; 67
    31fe:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <SERVO_u8SmoothOpenChA>
		SERVO_u8SmoothCloseChA(0);
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <SERVO_u8SmoothCloseChA>
    320e:	f3 cf       	rjmp	.-26     	; 0x31f6 <main+0xe>

00003210 <__prologue_saves__>:
    3210:	2f 92       	push	r2
    3212:	3f 92       	push	r3
    3214:	4f 92       	push	r4
    3216:	5f 92       	push	r5
    3218:	6f 92       	push	r6
    321a:	7f 92       	push	r7
    321c:	8f 92       	push	r8
    321e:	9f 92       	push	r9
    3220:	af 92       	push	r10
    3222:	bf 92       	push	r11
    3224:	cf 92       	push	r12
    3226:	df 92       	push	r13
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	ca 1b       	sub	r28, r26
    323a:	db 0b       	sbc	r29, r27
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	de bf       	out	0x3e, r29	; 62
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	cd bf       	out	0x3d, r28	; 61
    3246:	09 94       	ijmp

00003248 <__epilogue_restores__>:
    3248:	2a 88       	ldd	r2, Y+18	; 0x12
    324a:	39 88       	ldd	r3, Y+17	; 0x11
    324c:	48 88       	ldd	r4, Y+16	; 0x10
    324e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3250:	6e 84       	ldd	r6, Y+14	; 0x0e
    3252:	7d 84       	ldd	r7, Y+13	; 0x0d
    3254:	8c 84       	ldd	r8, Y+12	; 0x0c
    3256:	9b 84       	ldd	r9, Y+11	; 0x0b
    3258:	aa 84       	ldd	r10, Y+10	; 0x0a
    325a:	b9 84       	ldd	r11, Y+9	; 0x09
    325c:	c8 84       	ldd	r12, Y+8	; 0x08
    325e:	df 80       	ldd	r13, Y+7	; 0x07
    3260:	ee 80       	ldd	r14, Y+6	; 0x06
    3262:	fd 80       	ldd	r15, Y+5	; 0x05
    3264:	0c 81       	ldd	r16, Y+4	; 0x04
    3266:	1b 81       	ldd	r17, Y+3	; 0x03
    3268:	aa 81       	ldd	r26, Y+2	; 0x02
    326a:	b9 81       	ldd	r27, Y+1	; 0x01
    326c:	ce 0f       	add	r28, r30
    326e:	d1 1d       	adc	r29, r1
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	ed 01       	movw	r28, r26
    327c:	08 95       	ret

0000327e <_exit>:
    327e:	f8 94       	cli

00003280 <__stop_program>:
    3280:	ff cf       	rjmp	.-2      	; 0x3280 <__stop_program>
